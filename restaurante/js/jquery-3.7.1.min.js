/*!
 * Biblioteca JavaScript jQuery v3.7.1
 * https://jquery.com/
 *
 * Copyright OpenJS Foundation e outros colaboradores
 * Lançado sob a licença MIT
 * https://jquery.org/license
 *
 * Data: 2023-08-28T13:37Z
 */
(função(global, fábrica) {

	“usar estrito”;

	if (typeof module === "objeto" && typeof module.exports === "objeto" ) {

		// Para ambientes CommonJS e semelhantes a CommonJS onde uma `janela` adequada
		// está presente, execute a fábrica e obtenha o jQuery.
		// Para ambientes que não possuem uma `janela` com um `documento`
		// (como Node.js), exponha uma fábrica como module.exports.
		// Isto acentua a necessidade da criação de uma verdadeira `janela`.
		// por exemplo, var jQuery = require("jquery")(window);
		// Veja o ticket trac-14549 para mais informações.
		module.exportações = global.documento?
			fábrica(global, verdadeiro):
			função (w) {
				if ( !w.documento ) {
					throw new Error( "jQuery requer uma janela com um documento");
				}
				retornar fábrica (w);
			};
	} outro {
		fábrica (global);
	}

//Passe isto se a janela ainda não estiver definida
} )( typeof window !== "indefinido" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// lança exceções quando código não estrito (por exemplo, ASP.NET 4.5) acessa o modo estrito
// argumentos.callee.caller (trac-13335). Mas a partir do jQuery 3.0 (2016), o modo estrito deve ser comum
// o suficiente para que todas essas tentativas sejam guardadas em um bloco try.
“usar estrito”;

var arr = [];

var getProto = Object.getPrototypeOf;

var fatia = arr.slice;

var plana = arr.flat? função(matriz) {
	retornar arr.flat.call(array);
} : função(matriz) {
	retornar arr.concat.apply([], matriz);
};


var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call(Object);

var suporte = {};

var isFunction = function isFunction( obj ) {

		// Suporte: Chrome <=57, Firefox <=52
		// Em alguns navegadores, typeof retorna "função" para elementos HTML <object>
		// (ou seja, `typeof document.createElement( "object" ) === "function"`).
		// Não queremos classificar *nenhum* nó DOM como uma função.
		// Suporte: QtWeb <=3.8.5, WebKit <=534.34, ferramenta wkhtmltopdf <=0.12.5
		// Além disso, para o WebKit antigo, typeof retorna "função" para coleções HTML
		// (por exemplo, `typeof document.getElementsByTagName("div") === "função"`). (gh-4756)
		retornar typeof obj === "função" && typeof obj.nodeType !== "número" &&
			typeof obj.item !== "função";
	};


var isWindow = function isWindow( obj ) {
		retornar obj != null && obj === obj.window;
	};


var documento = janela.document;



	var preservadoScriptAttributes = {
		tipo: verdadeiro,
		fonte: verdadeiro,
		nonce: verdadeiro,
		noModule: verdadeiro
	};

	function DOMEval(código, nó, doc) {
		documento = documento || documento;

		var i, val,
			script = doc.createElement("script");

		script.text = código;
		se (nó) {
			for (i em preserveScriptAttributes) {

				// Suporte: Firefox 64+, Edge 18+
				// Alguns navegadores não suportam a propriedade "nonce" em scripts.
				// Por outro lado, apenas usar `getAttribute` não é suficiente, pois
				// o atributo `nonce` é redefinido para uma string vazia sempre que
				// torna-se conectado ao contexto de navegação.
				// Veja https://github.com/whatwg/html/issues/2369
				// Veja https://html.spec.whatwg.org/#nonce-attributes
				// A verificação `node.getAttribute` foi adicionada para fins de
				// `jQuery.globalEval` para que ele possa falsificar um nó contendo nonce
				// através de um objeto.
				val = nó[i] || node.getAttribute && node.getAttribute(i);
				se (val) {
					script.setAttribute(i, val);
				}
			}
		}
		doc.head.appendChild(script).parentNode.removeChild(script);
	}


função toType(obj) {
	if (obj == nulo) {
		retornar obj + "";
	}

	// Suporte: apenas Android <=2.3 (RegExp funcional)
	retornar tipo de obj === "objeto" || typeof obj === "função"?
		class2type[toString.call(obj)] || "objeto":
		tipo de objeto;
}
/* símbolo global */
// Definir este global em .eslintrc.json criaria o perigo de usar o global
// desprotegido em outro lugar, parece mais seguro definir global apenas para este módulo



var versão = "3.7.1",

	rhtmlSufixo = /HTML$/i,

	//Define uma cópia local do jQuery
	jQuery = function(seletor, contexto) {

		// O objeto jQuery é na verdade apenas o construtor init 'aprimorado'
		// Precisa de init se o jQuery for chamado (apenas permite que o erro seja gerado se não for incluído)
		retornar novo jQuery.fn.init(seletor, contexto);
	};

jQuery.fn = jQuery.prototype = {

	//A versão atual do jQuery que está sendo usada
	jquery: versão,

	construtor: jQuery,

	// O comprimento padrão de um objeto jQuery é 0
	comprimento: 0,

	toArray: função() {
		retornar fatia.call (este);
	},

	// Obtém o enésimo elemento no conjunto de elementos correspondentes OU
	// Obtém todo o elemento correspondente definido como um array limpo
	obter: função(num) {

		// Retorna todos os elementos em um array limpo
		if (num == nulo) {
			retornar fatia.call (este);
		}

		// Retorna apenas um elemento do conjunto
		retornar num < 0? este[num + este.comprimento]: este[num];
	},

	//Pegue um array de elementos e coloque-o na pilha
	// (retornando o novo conjunto de elementos correspondentes)
	pushStack: function(elementos) {

		//Constrói um novo conjunto de elementos correspondentes ao jQuery
		var ret = jQuery.merge( this.constructor(), elems );

		//Adiciona o objeto antigo na pilha (como referência)
		ret.prevObject = isto;

		// Retorna o conjunto de elementos recém-formado
		retornar ret;
	},

	//Executa um retorno de chamada para cada elemento do conjunto correspondente.
	cada: function( retorno de chamada ) {
		return jQuery.each(isto, retorno de chamada);
	},

	mapa: function(retorno de chamada) {
		retornar this.pushStack(jQuery.map(this, function(elem, i) {
			retornar callback.call(elem, i, elem);
		} ) );
	},

	fatia: function() {
		retornar this.pushStack(slice.apply(this, argumentos));
	},

	primeiro: função() {
		retorne isto.eq(0);
	},

	último: função() {
		retorne isto.eq(-1);
	},

	função par() {
		retornar this.pushStack( jQuery.grep( this, function( _elem, i ) {
			retornar (i + 1)% 2;
		} ) );
	},

	Função estranha() {
		retornar this.pushStack( jQuery.grep( this, function( _elem, i ) {
			retornar i% 2;
		} ) );
	},

	equação: função (i) {
		var len = este.comprimento,
			j = +i + (i < 0 ? len : 0 );
		retornar this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	fim: função() {
		retornar este.prevObject || this.constructor();
	},

	// Apenas para uso interno.
	// Comporta-se como um método Array, não como um método jQuery.
	empurre empurre,
	classificar: arr.sort,
	emenda: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	opções var, nome, src, cópia, copyIsArray, clone,
		alvo = argumentos[ 0 ] || {},
		eu = 1,
		comprimento = argumentos.comprimento,
		profundo = falso;

	// Lida com uma situação de cópia profunda
	if (tipo de destino === "boolean" ) {
		profundo = alvo;

		// Ignora o booleano e o alvo
		alvo = argumentos[i] || {};
		eu++;
	}

	// Trata o caso quando o destino é uma string ou algo assim (possível em cópia profunda)
	if (tipo de destino!== "objeto" &&!isFunction(alvo)) {
		alvo = {};
	}

	// Estende o próprio jQuery se apenas um argumento for passado
	if (i === comprimento) {
		alvo = isto;
		eu--;
	}

	for ( ; i < comprimento; i++ ) {

		// Lida apenas com valores não nulos/indefinidos
		if ((opções = argumentos[ i ] ) != null ) {

			// Estende o objeto base
			for (nome nas opções) {
				copiar = opções[nome];

				// Evita a poluição de Object.prototype
				// Evita loop sem fim
				if (nome === "__proto__" || alvo === copiar) {
					continuar;
				}

				// Recurse se estivermos mesclando objetos simples ou arrays
				if (deep && copy && (jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray(cópia ) ) ) ) {
					src = destino[nome];

					//Garante o tipo adequado para o valor de origem
					if ( copyIsArray && !Array.isArray( src ) ) {
						clonar = [];
					} else if ( !copyIsArray && !jQuery.isPlainObject( src ) ) {
						clonar = {};
					} outro {
						clone=src;
					}
					copyIsArray = falso;

					// Nunca mova objetos originais, clone-os
					alvo[nome] = jQuery.extend(profundo, clone, cópia);

				// Não traga valores indefinidos
				} else if (copiar! == indefinido) {
					alvo[nome] = copiar;
				}
			}
		}
	}

	//Retorna o objeto modificado
	alvo de retorno;
};

jQuery.extend({

	// Único para cada cópia do jQuery na página
	expando: "jQuery" + ( versão + Math.random() ).replace( /\D/g, "" ),

	// Suponha que o jQuery esteja pronto sem o módulo ready
	isReady: verdadeiro,

	erro: função(msg) {
		lançar novo erro (msg);
	},

	noop: função() {},

	isPlainObject: função (obj) {
		var proto,Ctor;

		// Detecta negativos óbvios
		// Use toString em vez de jQuery.type para capturar objetos host
		if (!obj || toString.call(obj)!== "[objeto objeto]") {
			retorna falso;
		}

		proto = getProto(obj);

		// Objetos sem protótipo (por exemplo, `Object.create(null)`) são simples
		se (!proto){
			retornar verdadeiro;
		}

		// Objetos com protótipo são simples se foram construídos por uma função Object global
		Ctor = hasOwn.call( proto, "construtor" ) && proto.constructor;
		return typeof Ctor === "função" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: função (obj) {
		var nome;

		for (nome em obj) {
			retorna falso;
		}
		retornar verdadeiro;
	},

	// Avalia um script em um contexto fornecido; cai de volta para o global
	// se não for especificado.
	globalEval: function(código, opções, doc) {
		DOMEval(código, { nonce: opções && opções.nonce }, doc );
	},

	cada: function(obj, retorno de chamada) {
		var comprimento, i = 0;

		if (isArrayLike(obj)) {
			comprimento = obj.comprimento;
			for ( ; i < comprimento; i++ ) {
				if (callback.call(obj[i], i, obj[i]) === falso) {
					quebrar;
				}
			}
		} outro {
			para (eu em obj) {
				if (callback.call(obj[i], i, obj[i]) === falso) {
					quebrar;
				}
			}
		}

		retornar objeto;
	},


	// Recupera o valor de texto de um array de nós DOM
	texto: função (elemento) {
		nó var,
			ret = "",
			eu = 0,
			nodeType = elem.nodeType;

		if (!nodeType) {

			// Se não houver nodeType, espera-se que seja um array
			while ((nó = elemento[i++])) {

				// Não atravessa os nós de comentários
				ret += jQuery.text(nó);
			}
		}
		if (nodeType === 1 || nodeType === 11) {
			retornar elem.textContent;
		}
		if (nodeType === 9) {
			retornar elem.documentElement.textContent;
		}
		if (nodeType === 3 || nodeType === 4) {
			retornar elem.nodeValue;
		}

		// Não inclui nós de comentários ou instruções de processamento

		retornar ret;
	},

	// os resultados são apenas para uso interno
	makeArray: function( arr, resultados ) {
		var ret = resultados || [];

		if (arr! = nulo) {
			if (isArrayLike(Object(arr))) {
				jQuery.merge(ret,
					tipo de arr === "string"?
						[arr]: arr
				);
			} outro {
				push.call(ret, arr);
			}
		}

		retornar ret;
	},

	inArray: function(elem, arr, i) {
		retornar arr == nulo? -1: indexOf.call(arr,elem,i);
	},

	isXMLDoc: function(elem) {
		var namespace = elem && elem.namespaceURI,
			docElem = elem && ( elem.ownerDocument || elem ).documentElement;

		// Assume HTML quando documentElement ainda não existe, como dentro
		//fragmentos do documento.
		return !rhtmlSuffix.test( namespace || docElem && docElem.nodeName || "HTML" );
	},

	// Suporte: somente Android <=4.0, somente PhantomJS 1
	// push.apply(_, arraylike) lança no WebKit antigo
	mesclar: function(primeiro, segundo) {
		var len = +segundo.comprimento,
			j = 0,
			i = primeiro.comprimento;

		for ( ; j < len; j++ ) {
			primeiro[i++] = segundo[j];
		}

		primeiro.comprimento = i;

		retorne primeiro;
	},

	grep: function(elementos, retorno de chamada, inverter) {
		var callbackInverse,
			correspondências = [],
			eu = 0,
			comprimento = elementos.comprimento,
			callbackExpect = !invert;

		//Percorre o array, salvando apenas os itens
		// que passa a função validadora
		for ( ; i < comprimento; i++ ) {
			callbackInverse = !callback(elems[ i ], i );
			if (callbackInverse! == callbackExpect) {
				corresponde.push(elems[i]);
			}
		}

		partidas de retorno;
	},

	//arg é apenas para uso interno
	mapa: function(elementos, retorno de chamada, arg) {
		var comprimento, valor,
			eu = 0,
			ret = [];

		// Percorre o array, traduzindo cada um dos itens para seus novos valores
		if (isArrayLike(elementos)) {
			comprimento = elementos.comprimento;
			for ( ; i < comprimento; i++ ) {
				valor = retorno de chamada(elems[i], i, arg);

				if (valor! = nulo) {
					ret.push(valor);
				}
			}

		// Percorre todas as chaves do objeto,
		} outro {
			for (i em elementos) {
				valor = retorno de chamada(elems[i], i, arg);

				if (valor! = nulo) {
					ret.push(valor);
				}
			}
		}

		// Achata quaisquer arrays aninhados
		retornar plano(ret);
	},

	// Um ​​contador GUID global para objetos
	guia: 1,

	// jQuery.support não é usado no Core, mas outros projetos anexam seus
	// propriedades para ele, então ele precisa existir.
	suporte: suporte
} );

if (typeof Símbolo === "função" ) {
	jQuery.fn[Símbolo.iterador] = arr[Símbolo.iterador];
}

// Preencher o mapa class2type
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
	função(_i, nome) {
		class2type[ "[objeto " + nome + "]" ] = nome.toLowerCase();
	} );

função isArrayLike(obj) {

	// Suporte: apenas iOS 8.2 real (não reproduzível no simulador)
	// verificação `in` usada para evitar erro JIT (gh-2145)
	// hasOwn não é usado aqui devido a falsos negativos
	// em relação ao comprimento do Nodelist no IE
	var comprimento = !!obj && "comprimento" em obj && obj.length,
		tipo = toType(obj);

	if ( isFunction( obj ) || isWindow( obj ) ) {
		retorna falso;
	}

	tipo de retorno === "matriz" || comprimento === 0 ||
		typeof comprimento === "número" && comprimento > 0 && ( comprimento - 1 ) em obj;
}


function nodeName(elem, nome) {

	return elem.nodeName && elem.nodeName.toLowerCase() === nome.toLowerCase();

}
var pop = arr.pop;


var sort = arr.sort;


var emenda = arr.splice;


var espaço em branco = "[\\x20\\t\\r\\n\\f]";


var rtrimCSS = new RegExp(
	"^" + espaço em branco + "+|((?:^|[^\\\\])(?:\\\\.)*)" + espaço em branco + "+$",
	"g"
);




//Nota: um elemento não contém a si mesmo
jQuery.contains=função(a,b){
	var bup = b && b.parentNode;

	retornar um === bup || !!( bup && bup.nodeType === 1 && (

		// Suporte: IE 9 - 11+
		// O IE não possui `contém` no SVG.
		a.contém ?
			a.contém(bup):
			a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
	));
};




// serialização de string/identificador CSS
// https://drafts.csswg.org/cssom/#common-serializing-idioms
var rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\x80-\uFFFF\w-]/g;

função fcssescape(ch, asCodePoint) {
	if (asCodePoint) {

		// U+0000 NULL se torna U+FFFD CARÁTER DE SUBSTITUIÇÃO
		se (ch === "\0" ) {
			return "\uFFFD";
		}

		// Caracteres de controle e números (dependendo da posição) escapam como pontos de código
		retornar ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
	}

	// Outros caracteres ASCII potencialmente especiais recebem escape de barra invertida
	retornar "\\" + ch;
}

jQuery.escapeSelector=função(sel){
	return ( sel + "" ).replace( rcssescape, fcssescape );
};




var preferidoDoc = documento,
	pushNativo = push;

(função() {

var eu,
	Expr,
	contexto mais externo,
	classificarInput,
	tem Duplicado,
	push = pushNativo,

	// vars do documento local
	documento,
	documentElement,
	documentoIsHTML,
	rbuggyQSA,
	partidas,

	//Dados específicos da instância
	expando = jQuery.expando,
	dirruns = 0,
	feito = 0,
	classCache = criarCache(),
	tokenCache = criarCache(),
	compiladorCache = createCache(),
	nonnativeSelectorCache = createCache(),
	ordenarOrdem = function(a, b) {
		se (uma === b) {
			hasDuplicado = verdadeiro;
		}
		retornar 0;
	},

	booleans = "marcado|selecionado|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|" +
		"loop | múltiplo | aberto | somente leitura | obrigatório | escopo",

	// Expressões regulares

	// https://www.w3.org/TR/css-syntax-3/#ident-token-diagram
	identificador = "(?:\\\\[\\da-fA-F]{1,6}" + espaço em branco +
		"?|\\\\[^\\r\\n\\f]|[\\w-]|[^\0-\\x7f])+",

	// Seletores de atributos: https://www.w3.org/TR/selectors/#attribute-selectors
	atributos = "\\[" + espaço em branco + "*(" + identificador + ")(?:" + espaço em branco +

		// Operador (captura 2)
		"*([*^$|!~]?=)" + espaço em branco +

		// "Os valores dos atributos devem ser identificadores CSS [captura 5] ou strings [captura 3 ou captura 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"] )*)\"|(" + identificador + "))|)" +
		espaço em branco + "*\\]",

	pseudos = ":(" + identificador + ")(?:\\((" +

		// Para reduzir o número de seletores que precisam de tokenização no pré-filtro, dê preferência aos argumentos:
		// 1. citado (captura 3; captura 4 ou captura 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*) \")|" +

		// 2. simples (captura 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + atributos + ")*)|" +

		// 3. qualquer outra coisa (captura 2)
		".*" +
		")\\)|)",

	// Espaço em branco inicial e sem escape, capturando alguns caracteres que não são espaços em branco anteriores ao último
	rwhitespace = novo RegExp(espaço em branco + "+", "g" ),

	rcomma = new RegExp( "^" + espaço em branco + "*," + espaço em branco + "*" ),
	rleadingCombinator = new RegExp( "^" + espaço em branco + "*([>+~]|" + espaço em branco + ")" +
		espaço em branco + "*" ),
	rdescend = novo RegExp(espaço em branco + "|>" ),

	rpseudo = novo RegExp(pseudos),
	ridentifier = new RegExp( "^" + identificador + "$" ),

	matchExpr = {
		ID: novo RegExp( "^#(" + identificador + ")" ),
		CLASSE: new RegExp( "^\\.(" + identificador + ")" ),
		TAG: novo RegExp( "^(" + identificador + "|[*])" ),
		ATTR: novo RegExp( "^" + atributos),
		PSEUDO: novo RegExp( "^" + pseudos ),
		CRIANÇA: novo RegExp(
			"^:(somente|primeiro|último|nésimo|nésimo-último)-(filho|do-tipo)(?:\\(" +
				espaço em branco + "*(par|ímpar|(([+-]|)(\\d*)n|)" + espaço em branco + "*(?:([+-]|)" +
				espaço em branco + "*(\\d+)|))" + espaço em branco + "*\\)|)", "i" ),
		bool: new RegExp( "^(?:" + booleanos + ")$", "i" ),

		// Para uso em bibliotecas que implementam .is()
		// Usamos isso para correspondência de PDV em `select`
		precisaContext: new RegExp( "^" + espaço em branco +
			"*[>+~]|:(par|ímpar|eq|gt|lt|nth|primeiro|último)(?:\\(" + espaço em branco +
			"*((?:-\\d)?\\d*)" + espaço em branco + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:entrada|selecionar|área de texto|botão)$/i,
	cabeçalho = /^h\d$/i,

	// Seletores de ID ou TAG ou CLASS facilmente analisáveis/recuperáveis
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	irmão = /[+~]/,

	// CSS escapa
	// https://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\[\\da-fA-F]{1,6}" + espaço em branco +
		"?|\\\\([^\\r\\n\\f])", "g" ),
	funescape = function (escape, não hexadecimal) {
		var alto = "0x" + escape.slice(1) - 0x10000;

		if (não hexadecimal) {

			// Remove o prefixo da barra invertida de uma sequência de escape não hexadecimal
			retornar não hexadecimal;
		}

		// Substitua uma sequência de escape hexadecimal pelo ponto de código Unicode codificado
		// Suporte: IE <=11+
		// Para valores fora do Basic Multilingual Plane (BMP), construa manualmente um
		//par substituto
		retornar alto <0?
			String.fromCharCode(alto + 0x10000):
			String.fromCharCode( alto >> 10 | 0xD800, alto & 0x3FF | 0xDC00 );
	},

	// Usado para iframes; veja `setDocument`.
	// Suporte: IE 9 - 11+, Edge 12 - 18+
	// Remover o wrapper da função causa uma "Permissão negada"
	//erro no IE/Edge.
	descarregarHandler = function() {
		setDocument();
	},

	inDisabledFieldset = addCombinator(
		função (elemento) {
			return elem.disabled === true && nodeName( elem, "fieldset" );
		},
		{ dir: "parentNode", próximo: "legenda" }
	);

// Suporte: IE <=9 apenas
// Acessar document.activeElement pode ser gerado inesperadamente
// https://bugs.jquery.com/ticket/13393
function safeActiveElement() {
	tentar {
		retornar documento.activeElement;
	} pegar (errar) { }
}

// Otimiza para push.apply( _, NodeList )
tentar {
	push.apply(
		(arr = slice.call(preferredDoc.childNodes)),
		preferidoDoc.childNodes
	);

	// Suporte: Android <=4.0
	// Detecta falha silenciosa em push.apply
	// eslint-disable-next-line sem expressões não utilizadas
	arr[preferredDoc.childNodes.length].nodeType;
} pegar (e) {
	empurrar = {
		aplicar: function(target, els) {
			pushNative.apply(target, slice.call(els));
		},
		chamada: função(alvo) {
			pushNative.apply(alvo, slice.call(argumentos, 1));
		}
	};
}

function find(seletor, contexto, resultados, semente) {
	var m, i, elem, nid, match, groups, newSelector,
		novoContext = contexto && context.ownerDocument,

		// nodeType é padronizado como 9, já que o contexto é padronizado como document
		nodeType = contexto? contexto.nodeType: 9;

	resultados = resultados || [];

	//Retorna antecipadamente de chamadas com seletor ou contexto inválido
	if ( seletor de tipo!== "string" || !seletor ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		retornar resultados;
	}

	// Tente encontrar atalhos para operações (em vez de filtros) em documentos HTML
	if (! semente) {
		setDocument(contexto);
		contexto = contexto || documento;

		if (documentIsHTML) {

			// Se o seletor for suficientemente simples, tente usar um método DOM "get*By*"
			// (exceto o contexto DocumentFragment, onde os métodos não existem)
			if (nodeType! == 11 && (correspondência = rquickExpr.exec (seletor))) {

				//seletor de ID
				if ( ( m = correspondência[ 1 ] ) ) {

					// Contexto do documento
					if (nodeType === 9) {
						if ((elem = context.getElementById(m))) {

							// Suporte: somente IE 9
							// getElementById pode corresponder elementos por nome em vez de ID
							if (elem.id === m) {
								push.call(resultados,elem);
								retornar resultados;
							}
						} outro {
							retornar resultados;
						}

					//Contexto do elemento
					} outro {

						// Suporte: somente IE 9
						// getElementById pode corresponder elementos por nome em vez de ID
						if (newContext && (elem = newContext.getElementById(m)) &&
							find.contains(contexto,elem) &&
							elem.id === m) {

							push.call(resultados,elem);
							retornar resultados;
						}
					}

				//Seletor de tipo
				} else if (correspondência[2]) {
					push.apply(resultados, context.getElementsByTagName(seletor));
					retornar resultados;

				//Seletor de classe
				} else if ( ( m = match[ 3 ] ) && context.getElementsByClassName ) {
					push.apply(resultados, context.getElementsByClassName(m));
					retornar resultados;
				}
			}

			// Aproveite querySelectorAll
			if ( !nonnativeSelectorCache[ seletor + " " ] &&
				( !rbuggyQSA || !rbuggyQSA.test(seletor ) ) ) {

				novoSeletor = seletor;
				novoContexto = contexto;

				// qSA considera elementos fora de uma raiz de escopo ao avaliar filho ou
				// combinadores descendentes, o que não é o que queremos.
				// Nesses casos, contornamos o comportamento prefixando cada seletor no
				// lista com um seletor de ID referenciando o contexto do escopo.
				// A técnica também deve ser usada quando um combinador líder é usado
				// já que tais seletores não são reconhecidos por querySelectorAll.
				// Obrigado a Andrew Dupont por esta técnica.
				if (nodeType === 1 &&
					(rdescend.test(seletor) || rleadingCombinator.test(seletor))) {

					// Expande o contexto para seletores irmãos
					newContext = rsibling.test(seletor) && testContext(context.parentNode) ||
						contexto;

					// Podemos usar :scope em vez do ID hack se o navegador
					// suporta & se não estivermos mudando o contexto.
					// Suporte: IE 11+, Edge 17 - 18+
					// O IE/Edge às vezes gera um erro de "Permissão negada" quando
					// comparação estrita de dois documentos; comparações superficiais funcionam.
					// eslint-disable-next-line eqeqeq
					if ( newContext != contexto || !support.scope ) {

						//Captura o ID do contexto, configurando-o primeiro se necessário
						if ( ( nid = context.getAttribute( "id" ) ) ) {
							nid = jQuery.escapeSelector(nid);
						} outro {
							context.setAttribute("id",(nid=expando));
						}
					}

					// Prefixa cada seletor na lista
					grupos = tokenize(seletor);
					i = grupos.comprimento;
					enquanto eu-- ) {
						grupos[ i ] = ( nid ? "#" + nid : ":scope" ) + " " +
							toSelector(grupos[i]);
					}
					novoSeletor = groups.join( "," );
				}

				tentar {
					push.apply(resultados,
						newContext.querySelectorAll(newSelector)
					);
					retornar resultados;
				} catch (qsaError) {
					nonnativeSelectorCache(seletor, true);
				} finalmente {
					if ( nid === expandido ) {
						context.removeAttribute("id");
					}
				}
			}
		}
	}

	// Todos os outros
	return select( selector.replace( rtrimCSS, "$1" ), contexto, resultados, seed );
}

/**
 * Crie caches de valores-chave de tamanho limitado
 * @returns {function(string, object)} Retorna os dados do objeto após armazená-los em si mesmo com
 * nome da propriedade a string (com sufixo de espaço) e (se o cache for maior que Expr.cacheLength)
 * excluindo a entrada mais antiga
 */
função criarCache() {
	var chaves = [];

	cache de função (chave, valor) {

		// Use (key + " ") para evitar colisão com propriedades nativas do protótipo
		// (veja https://github.com/jquery/sizzle/issues/157)
		if (keys.push(key + " " ) > Expr.cacheLength ) {

			// Mantém apenas as entradas mais recentes
			excluir cache[keys.shift()];
		}
		return (cache[chave + " "] = valor);
	}
	cache de retorno;
}

/**
 * Marque uma função para uso especial pelo módulo seletor jQuery
 * @param {Function} fn A função a ser marcada
 */
função marcaFunção(fn) {
	fn[expandir] = verdadeiro;
	retornar fn;
}

/**
 * Teste de suporte usando um elemento
 * @param {Function} fn Passa o elemento criado e retorna um resultado booleano
 */
função afirmar (fn) {
	var el = document.createElement("conjunto de campos");

	tentar {
		retornar !!fn(el);
	} pegar (e) {
		retorna falso;
	} finalmente {

		//Remove do seu pai por padrão
		if (el.parentNode) {
			el.parentNode.removeChild(el);
		}

		// libera memória no IE
		el = nulo;
	}
}

/**
 * Retorna uma função para usar em pseudos para tipos de entrada
 * @param {String} tipo
 */
function createInputPseudo( tipo ) {
	função de retorno (elemento) {
		return nodeName(elem, "input" ) && elem.type === type;
	};
}

/**
 * Retorna uma função para usar em pseudos de botões
 * @param {String} tipo
 */
function createButtonPseudo( tipo ) {
	função de retorno (elemento) {
		return (nodeName(elem, "entrada" ) || nodeName( elem, "botão" ) ) &&
			elem.type === tipo;
	};
}

/**
 * Retorna uma função para usar em pseudos para :enabled/:disabled
 * @param {Boolean} desativado verdadeiro para :disabled; falso para: habilitado
 */
function createDisabledPseudo(desabilitado) {

	// Falsos positivos conhecidos :disabled: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	função de retorno (elemento) {

		// Somente certos elementos podem corresponder a :enabled ou :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if("forma" no elemento) {

			// Verifica a deficiência herdada em elementos relevantes não deficientes:
			// * listou os elementos associados ao formulário em um conjunto de campos desabilitado
			// https://html.spec.whatwg.org/multipage/forms.html#category-listed
			// https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * elementos de opção em um optgroup desabilitado
			// https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// Todos esses elementos possuem uma propriedade "form".
			if (elem.parentNode && elem.disabled === falso) {

				// Os elementos de opção são transferidos para um optgroup pai, se presente
				if("rótulo" no elemento) {
					if ("rótulo" em elem.parentNode ) {
						retornar elem.parentNode.disabled === desabilitado;
					} outro {
						return elem.disabled === desabilitado;
					}
				}

				// Suporte: IE 6 - 11+
				// Use a propriedade de atalho isDisabled para verificar ancestrais de conjuntos de campos desabilitados
				return elem.isDisabled === desabilitado ||

					// Onde não houver isDisabled, verifique manualmente
					elem.isDisabled !== !disabled &&
						inDisabledFieldset(elem) === desabilitado;
			}

			return elem.disabled === desabilitado;

		// Tente separar os elementos que não podem ser desabilitados antes de confiar na propriedade disabled.
		// Algumas vítimas ficam presas em nossa rede (rótulo, legenda, menu, faixa), mas não deveria
		// até mesmo existir neles, quanto mais ter um valor booleano.
		} else if("rótulo" no elemento) {
			return elem.disabled === desabilitado;
		}

		// Os elementos restantes não são nem :enabled nem :disabled
		retorna falso;
	};
}

/**
 * Retorna uma função para usar em pseudos para posicionais
 * @param {Função} fn
 */
function criarPosicionalPseudo(fn) {
	return markFunction(função(argumento) {
		argumento = +argumento;
		return markFunction(função(semente, correspondências) {
			varj,
				matchIndexes = fn( [], seed.length, argumento ),
				i = matchIndexes.length;

			// Corresponde aos elementos encontrados nos índices especificados
			enquanto eu-- ) {
				if (seed[ (j = matchIndexes[ i ] ) ] ) {
					semente[ j ] = !( corresponde a [ j ] = semente[ j ] );
				}
			}
		} );
	} );
}

/**
 * Verifica a validade de um nó como um contexto de seletor jQuery
 * @param {Elemento|Objeto=} contexto
 * @returns {Element|Object|Boolean} O nó de entrada, se aceitável, caso contrário, um valor falso
 */
function testeContext(contexto) {
	return context && typeof context.getElementsByTagName !== "indefinido" && context;
}

/**
 * Define variáveis ​​relacionadas ao documento uma vez com base no documento atual
 * @param {Element|Object} [node] Um elemento ou objeto de documento a ser usado para definir o documento
 * @returns {Object} Retorna o documento atual
 */
function setDocument(nó) {
	var subjanela,
		doc = nó? node.ownerDocument || nó: preferidoDoc;

	//Retorna antecipadamente se o documento for inválido ou já selecionado
	// Suporte: IE 11+, Edge 17 - 18+
	// O IE/Edge às vezes gera um erro de "Permissão negada" ao comparar rigorosamente
	//dois documentos; comparações superficiais funcionam.
	// eslint-disable-next-line eqeqeq
	if ( doc == documento || doc.nodeType !== 9 || !doc.documentElement ) {
		documento de devolução;
	}

	//Atualiza variáveis ​​globais
	documento = documento;
	documentElement = document.documentElement;
	documentIsHTML = !jQuery.isXMLDoc(documento);

	// Suporte: apenas iOS 7, IE 9 - 11+
	// Navegadores mais antigos não suportavam `correspondências` sem prefixo.
	correspondências = documentElement.matches ||
		documentElement.webkitMatchesSelector ||
		documentElement.msMatchesSelector;

	// Suporte: IE 9 - 11+, Edge 12 - 18+
	// Acessar documentos iframe após o descarregamento gera erros de "permissão negada"
	// (veja trac-13936).
	// Limita a correção ao IE e Edge Legacy; apesar do Edge 15+ implementar `matches`,
	// todas as versões IE 9+ e Edge Legacy implementam `msMatchesSelector` também.
	if (documentElement.msMatchesSelector &&

		// Suporte: IE 11+, Edge 17 - 18+
		// O IE/Edge às vezes gera um erro de "Permissão negada" ao comparar rigorosamente
		//dois documentos; comparações superficiais funcionam.
		// eslint-disable-next-line eqeqeq
		preferidoDoc != documento &&
		( subWindow = document.defaultView ) && subWindow.top !== subWindow ) {

		// Suporte: IE 9 - 11+, Edge 12 - 18+
		subWindow.addEventListener("descarregar", unloadHandler );
	}

	// Suporte: IE <10
	// Verifica se getElementById retorna elementos por nome
	// Os métodos getElementById quebrados não selecionam nomes definidos programaticamente,
	// então use um teste getElementsByName indireto
	support.getById=asser(função(el){
		documentElement.appendChild( el ).id = jQuery.expando;
		retornar !document.getElementsByName ||
			!document.getElementsByName( jQuery.expando ).length;
	} );

	// Suporte: somente IE 9
	// Verifica se é possível fazer matchesSelector
	// em um nó desconectado.
	support.disconnectedMatch=asser(função(el){
		retornar partidas.call(el, "*" );
	} );

	// Suporte: IE 9 - 11+, Edge 12 - 18+
	// IE/Edge não suporta a pseudoclasse :scope.
	suporte.scope = assert( function() {
		retornar document.querySelectorAll( ":scope" );
	} );

	// Suporte: somente Chrome 105 - 111, somente Safari 15.4 - 16.3
	// Certifique-se de que o argumento `:has()` seja analisado implacavelmente.
	// Incluímos `*` no teste para detectar implementações com bugs que são
	// perdoar _seletivamente_ (especificamente quando a lista inclui pelo menos
	// um seletor válido).
	// Observe que tratamos a completa falta de suporte para `:has()` como se fosse
	// suporte compatível com especificações, o que é bom porque o uso de `:has()` em tais
	// os ambientes falharão no caminho qSA e retornarão à travessia do jQuery
	// de qualquer forma.
	suporte.cssHas = assert( function() {
		tentar {
			document.querySelector( ":has(*,:jqfake)" );
			retorna falso;
		} pegar (e) {
			retornar verdadeiro;
		}
	} );

	// ID filtra e encontra
	se (suporte.getById) {
		Expr.filtro.ID = função (id) {
			var attrId = id.replace(runescape, funescape);
			função de retorno (elemento) {
				return elem.getAttribute( "id" ) === attrId;
			};
		};
		Expr.find.ID = function(id, contexto) {
			if ( typeof context.getElementById !== "indefinido" && documentIsHTML ) {
				var elemento = context.getElementById(id);
				retornar elemento? [elemento]: [];
			}
		};
	} outro {
		Expr.filtro.ID = função (id) {
			var attrId = id.replace(runescape, funescape);
			função de retorno (elemento) {
				var node = typeof elem.getAttributeNode !== "indefinido" &&
					elem.getAttributeNode("id");
				retornar nó && node.value === attrId;
			};
		};

		// Suporte: somente IE 6 - 7
		// getElementById não é confiável como atalho de localização
		Expr.find.ID = function(id, contexto) {
			if ( typeof context.getElementById !== "indefinido" && documentIsHTML ) {
				var nó, i, elementos,
					elemento = context.getElementById(id);

				se (elemento) {

					//Verifica o atributo id
					nó = elem.getAttributeNode("id");
					if (nó && nó.valor === id) {
						retornar [elemento];
					}

					// recorre a getElementsByName
					elementos = context.getElementsByName(id);
					eu = 0;
					while ( (elem = elems[ i++ ] ) ) {
						nó = elem.getAttributeNode("id");
						if (nó && nó.valor === id) {
							retornar [elemento];
						}
					}
				}

				retornar [];
			}
		};
	}

	// Marcação
	Expr.find.TAG = function( tag, contexto ) {
		if (typeof context.getElementsByTagName! == "indefinido") {
			retornar context.getElementsByTagName(tag);

		// Os nós DocumentFragment não possuem gEBTN
		} outro {
			retornar context.querySelectorAll(tag);
		}
	};

	// Aula
	Expr.find.CLASS = function(className, contexto) {
		if (typeof context.getElementsByClassName! == "indefinido" && documentIsHTML) {
			retornar context.getElementsByClassName(className);
		}
	};

	/* QSA/matchesSelector
	-------------------------------------------------- -------------------- */

	// Suporte a QSA e matchesSelector

	rbuggyQSA = [];

	//Construir regex QSA
	// Estratégia Regex adotada por Diego Perini
	assert(função(el) {

		var entrada;

		documentElement.appendChild( el ).innerHTML =
			"<a id='" + expando + "' href='' desativado='disabled'></a>" +
			"<select id='" + expando + "-\r\\' desativado='desativado'>" +
			"<opção selecionada=''></option></select>";

		// Suporte: iOS <=7 - 8 apenas
		// Atributos booleanos e “valor” não são tratados corretamente em alguns documentos XML
		if ( !el.querySelectorAll( "[selecionado]" ).length ) {
			rbuggyQSA.push( "\\[" + espaço em branco + "*(?:valor|" + booleanos + ")" );
		}

		// Suporte: iOS <=7 - 8 apenas
		if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
			rbuggyQSA.push( "~=" );
		}

		// Suporte: apenas iOS 8
		// https://bugs.webkit.org/show_bug.cgi?id=136851
		// O `selector#id sibling-combinator selector` na página falha
		if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
			rbuggyQSA.push( ".#.+[+~]" );
		}

		// Suporte: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// Em alguns tipos de documentos, esses seletores não funcionariam nativamente.
		// Provavelmente está tudo bem, mas para compatibilidade com versões anteriores queremos manter
		// tratando-os através da travessia do jQuery no jQuery 3.x.
		if ( !el.querySelectorAll( ":checked" ).length ) {
			rbuggyQSA.push( ":verificado");
		}

		// Suporte: aplicativos nativos do Windows 8
		// Os atributos type e name são restritos durante a atribuição .innerHTML
		entrada = document.createElement("entrada");
		input.setAttribute("tipo", "oculto");
		el.appendChild(input).setAttribute( "nome", "D");

		// Suporte: IE 9 - 11+
		// O seletor :disabled do IE não seleciona os filhos dos conjuntos de campos desativados
		// Suporte: Chrome <=105+, Firefox <=104+, Safari <=15.4+
		// Em alguns tipos de documentos, esses seletores não funcionariam nativamente.
		// Provavelmente está tudo bem, mas para compatibilidade com versões anteriores queremos manter
		// tratando-os através da travessia do jQuery no jQuery 3.x.
		documentElement.appendChild(el).disabled=true;
		if (el.querySelectorAll( ":disabled" ).length !== 2 ) {
			rbuggyQSA.push( ":enabled", ":disabled" );
		}

		// Suporte: IE 11+, Edge 15 - 18+
		// O IE 11/Edge não encontra elementos em uma consulta `[name='']` em alguns casos.
		// Adicionando um atributo temporário ao documento antes que a seleção funcione
		// em torno do problema.
		// Curiosamente, o IE 10 e versões anteriores não parecem ter esse problema.
		entrada = document.createElement("entrada");
		input.setAttribute("nome", "");
		el.appendChild(entrada);
		if ( !el.querySelectorAll( "[nome='']" ).comprimento ) {
			rbuggyQSA.push( "\\[" + espaço em branco + "*nome" + espaço em branco + "*=" +
				espaço em branco + "*(?:''|\"\")" );
		}
	} );

	if (!support.cssHas) {

		// Suporte: Chrome 105 - 110+, Safari 15.4 - 16.3+
		// Nosso mecanismo regular `try-catch` falha ao detectar suporte nativo
		// pseudo-classes dentro de `:has()` (como `:has(:contains("Foo"))`)
		// em navegadores que analisam o argumento `:has()` como uma lista de seletores indulgente.
		// https://drafts.csswg.org/selectors/#relational agora requer o argumento
		// será analisado implacavelmente, mas os navegadores ainda não foram totalmente ajustados.
		rbuggyQSA.push( ":tem" );
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join( "|" ) );

	/* Ordenação
	-------------------------------------------------- -------------------- */

	//Ordenação da ordem do documento
	ordenarOrdem = function(a, b) {

		// Sinalizador para remoção de duplicatas
		se (uma === b) {
			hasDuplicado = verdadeiro;
			retornar 0;
		}

		// Classifica pela existência do método se apenas uma entrada tiver compareDocumentPosition
		var comparar = !a.compareDocumentPosition - !b.compareDocumentPosition;
		se (comparar) {
			retornar comparar;
		}

		// Calcula a posição se ambas as entradas pertencem ao mesmo documento
		// Suporte: IE 11+, Edge 17 - 18+
		// O IE/Edge às vezes gera um erro de "Permissão negada" ao comparar rigorosamente
		//dois documentos; comparações superficiais funcionam.
		// eslint-disable-next-line eqeqeq
		comparar = ( a.ownerDocument || a ) == ( b.ownerDocument || b ) ?
			a.compareDocumentPosition(b):

			// Caso contrário, saberemos que eles estão desconectados
			1;

		// Nós desconectados
		se (comparar & 1 ||
			( !support.sortDetached && b.compareDocumentPosition( a ) === comparar ) ) {

			//Escolha o primeiro elemento que está relacionado ao nosso documento preferido
			// Suporte: IE 11+, Edge 17 - 18+
			// O IE/Edge às vezes gera um erro de "Permissão negada" ao comparar rigorosamente
			//dois documentos; comparações superficiais funcionam.
			// eslint-disable-next-line eqeqeq
			if (a === documento || a.ownerDocument == preferidoDoc &&
				find.contains(preferredDoc, a)) {
				retornar -1;
			}

			// Suporte: IE 11+, Edge 17 - 18+
			// O IE/Edge às vezes gera um erro de "Permissão negada" ao comparar rigorosamente
			//dois documentos; comparações superficiais funcionam.
			// eslint-disable-next-line eqeqeq
			if ( b === documento || b.ownerDocument == preferidoDoc &&
				find.contains(preferredDoc, b)) {
				retornar 1;
			}

			//Mantém o pedido original
			retornar sortInput?
				(indexOf.call(sortInput, a) - indexOf.call(sortInput, b)):
				0;
		}

		retornar comparar & 4 ? -1: 1;
	};

	documento de devolução;
}

find.matches = function (expr, elementos) {
	return find(expr, null, null, elementos);
};

find.matchesSelector = function(elem, expr) {
	setDocument(elem);

	if (documentIsHTML &&
		!nonnativeSelectorCache[ expr + " " ] &&
		( !rbuggyQSA || !rbuggyQSA.test( expr ) ) ) {

		tentar {
			var ret = corresponde.call(elem, expr);

			// O matchesSelector do IE 9 retorna false em nós desconectados
			if (ret || suporte.disconnectedMatch ||

					// Da mesma forma, diz-se que nós desconectados estão em um documento
					// fragmento no IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				retornar ret;
			}
		} pegar (e) {
			nonnativeSelectorCache(expr, true);
		}
	}

	return find( expr, documento, null, [elem ] ).length > 0;
};

find.contains = function(contexto, elem) {

	// Define vars do documento se necessário
	// Suporte: IE 11+, Edge 17 - 18+
	// O IE/Edge às vezes gera um erro de "Permissão negada" ao comparar rigorosamente
	//dois documentos; comparações superficiais funcionam.
	// eslint-disable-next-line eqeqeq
	if (( context.ownerDocument || contexto ) != documento ) {
		setDocument(contexto);
	}
	retornar jQuery.contains(contexto, elem);
};


find.attr = function(elem, nome) {

	// Define vars do documento se necessário
	// Suporte: IE 11+, Edge 17 - 18+
	// O IE/Edge às vezes gera um erro de "Permissão negada" ao comparar rigorosamente
	//dois documentos; comparações superficiais funcionam.
	// eslint-disable-next-line eqeqeq
	if ((elem.ownerDocument || elem)!= documento) {
		setDocument(elem);
	}

	var fn = Expr.attrHandle[nome.toLowerCase()],

		// Não se deixe enganar pelas propriedades Object.prototype (veja trac-13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn(elem, nome,! documentIsHTML):
			indefinido;

	if (val! == indefinido) {
		valor de retorno;
	}

	return elem.getAttribute(nome);
};

encontrar.erro = função (msg) {
	throw new Error("Erro de sintaxe, expressão não reconhecida: " + msg );
};

/**
 * Classificação de documentos e remoção de duplicatas
 * @param resultados {ArrayLike}
 */
jQuery.uniqueSort = função (resultados) {
	var elemento,
		duplicatas = [],
		j = 0,
		eu = 0;

	// A menos que *sabemos* que podemos detectar duplicatas, assumimos sua presença
	//
	// Suporte: Android <=4.0+
	// O teste para detecção de duplicatas é imprevisível, então, em vez disso, assuma que não podemos
	// depende da detecção de duplicatas em todos os navegadores sem uma classificação estável.
	hasDuplicate = !support.sortStable;
	sortInput = !support.sortStable && slice.call( resultados, 0 );
	sort.call (resultados, sortOrder);

	if (hasDuplicado) {
		while ( (elem = resultados[ i++ ] ) ) {
			if (elem === resultados[i]) {
				j = duplicatas.push(i);
			}
		}
		enquanto (j--) {
			splice.call(resultados, duplicatas[ j ], 1 );
		}
	}

	//Limpa a entrada após a classificação para liberar objetos
	// Veja https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	retornar resultados;
};

jQuery.fn.uniqueSort = função() {
	retornar this.pushStack (jQuery.uniqueSort (slice.apply (this)));
};

Expr = jQuery.expr = {

	//Pode ser ajustado pelo usuário
	cacheComprimento: 50,

	createPseudo: markFunction,

	correspondência: matchExpr,

	attrHandle: {},

	encontrar: {},

	relativo: {
		">": { dir: "parentNode", primeiro: verdadeiro },
		" ": { dir: "parentNode" },
		"+": { dir: "irmão anterior", primeiro: verdadeiro },
		"~": { dir: "irmão anterior" }
	},

	pré-filtro: {
		ATTR: função (correspondência) {
			combinar[ 1 ] = combinar[ 1 ].replace( runescape, funescape );

			// Move o valor fornecido para match[3] entre aspas ou não
			combinar[ 3 ] = ( combinar[ 3 ] || combinar[ 4 ] || combinar[ 5 ] || "" )
				.replace(runescape,funescape);

			if (corresponder[2] === "~=") {
				combinar[ 3 ] = " " + combinar[ 3 ] + " ";
			}

			retornar match.slice(0, 4);
		},

		CRIANÇA: função (correspondência) {

			/* correspondências de matchExpr["CHILD"]
				1 tipo (somente|nésimo|...)
				2 o que (filho | do tipo)
				3 argumentos (par|ímpar|\d*|\d*n([+-]\d+)?|...)
				4 componente xn do argumento xn+y ([+-]?\d*n|)
				5 sinais do componente xn
				6 x do componente xn
				7 sinal do componente y
				8 anos do componente y
			*/
			combinar[1] = combinar[1].toLowerCase();

			if (corresponder [1]. fatia (0, 3) === "enésimo") {

				// nth-* requer argumento
				se (!corresponder[3]){
					encontrar.erro(correspondência[0]);
				}

				// parâmetros numéricos xey para Expr.filter.CHILD
				// lembra que false/true foi convertido respectivamente para 0/1
				combinar[4] = +(corresponder[4]?
					combinar[5] + (corresponder[6] || 1):
					2 * (correspondência[ 3 ] === "par" || correspondência[ 3 ] === "ímpar" )
				);
				combinar[ 5 ] = +( (corresponder[ 7 ] + combinar[ 8 ] ) || combinar[ 3 ] === "ímpar" );

			// outros tipos proíbem argumentos
			} senão if (correspondência[3]) {
				encontrar.erro(correspondência[0]);
			}

			partida de volta;
		},

		PSEUDO: função(correspondência) {
			var excesso,
				sem aspas = !match[ 6 ] && match[ 2 ];

			if (correspondênciaExpr.CHILD.teste(correspondência[0])) {
				retornar nulo;
			}

			//Aceita os argumentos citados como estão
			if (corresponder[3]) {
				combinar[2] = combinar[4] || combinar[5] || "";

			//Retira caracteres em excesso de argumentos sem aspas
			} else if (sem aspas && rpseudo.test(sem aspas) &&

				// Obtém o excesso do tokenize (recursivamente)
				(excesso = tokenize(sem aspas, verdadeiro)) &&

				// avança para o próximo parêntese de fechamento
				( excesso = unquoted.indexOf( ")", unquoted.length - excesso ) - unquoted.length ) ) {

				// excesso é um índice negativo
				combinar[ 0 ] = combinar[ 0 ].slice( 0, excesso );
				match[2] = sem aspas.slice(0, excesso);
			}

			// Retorna apenas as capturas necessárias ao método pseudofiltro (tipo e argumento)
			retornar match.slice(0, 3);
		}
	},

	filtro: {

		TAG: função (nodeNameSelector) {
			var esperadoNodeName = nodeNameSelector.replace(runescape, funescape).toLowerCase();
			retornar nodeNameSelector === "*" ?
				função() {
					retornar verdadeiro;
				}:
				função (elemento) {
					return nodeName(elem, esperadoNodeName);
				};
		},

		CLASSE: function(nomedaclasse) {
			var padrão = classCache[nomedaclasse + " "];

			padrão de retorno ||
				(padrão = new RegExp( "(^|" + espaço em branco + ")" + className +
					"(" + espaço em branco + "|$)" ) ) &&
				classCache(className, function(elem) {
					padrão de retorno.teste(
						typeof elem.className === "string" && elem.className ||
							typeof elem.getAttribute !== "indefinido" &&
								elem.getAttribute("classe") ||
							""
					);
				} );
		},

		ATTR: função(nome, operador, verificação) {
			função de retorno (elemento) {
				var resultado = find.attr(elem, nome);

				if (resultado == nulo) {
					operador de retorno === "!=";
				}
				if (!operador) {
					retornar verdadeiro;
				}

				resultado += "";

				if (operador === "=") {
					retornar resultado === verificar;
				}
				if (operador === "!=") {
					retornar resultado! == verificar;
				}
				if (operador === "^=") {
					retornar verificação && resultado.indexOf(verificação) === 0;
				}
				if (operador === "*=") {
					retornar verificação && resultado.indexOf(verificação) > -1;
				}
				if (operador === "$=") {
					retornar verificação && resultado.slice( -check.length ) === verificar;
				}
				if (operador === "~=") {
					return ( " " + resultado.replace( rwhitespace, " " ) + " " )
						.indexOf(verificação) > -1;
				}
				if (operador === "|=") {
					retornar resultado === verificar || resultado.slice (0, verificação.comprimento + 1) === verificação + "-";
				}

				retorna falso;
			};
		},

		CRIANÇA: função(tipo, o que, _argumento, primeiro, último) {
			var simples = type.slice (0, 3)! == "enésimo",
				forward = type.slice( -4 ) !== "último",
				ofType = o que === "do tipo";

			retornar primeiro === 1 && último === 0 ?

				// Atalho para :nth-*(n)
				função (elemento) {
					return !!elem.parentNode;
				}:

				function(elem, _contexto, xml) {
					var cache, outerCache, node, nodeIndex, start,
						dir = simples! == avançar? "nextSibling" : "anteriorIrmão",
						pai = elem.parentNode,
						nome = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diferença = falso;

					if (pai) {

						// :(primeiro|último|apenas)-(filho|do-tipo)
						se (simples) {
							enquanto (diretório) {
								nó = elemento;
								while ((nó = nó[diretório])) {
									if (doTipo?
										nodeName(nó, nome):
										node.nodeType === 1) {

										retorna falso;
									}
								}

								// Inverte a direção para :only-* (se ainda não o fizemos)
								start = dir = type === "apenas" && !start && "nextSibling";
							}
							retornar verdadeiro;
						}

						iniciar = [avançar? parent.firstChild: parent.lastChild];

						// não-xml :nth-child(...) armazena dados de cache em `parent`
						if (encaminhar && useCache) {

							// Busca `elem` de um índice previamente armazenado em cache
							outerCache = pai[expandir] || (pai[expandido] = {});
							cache = outerCache[ tipo ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[2];
							nó = nodeIndex && parent.childNodes[nodeIndex];

							while ( (nó = ++nodeIndex && nó && nó[ dir ] ||

								// Fallback para buscar `elem` desde o início
								(diff = nodeIndex = 0) || start.pop() ) ) {

								// Quando encontrado, armazena em cache os índices em `parent` e quebra
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									outerCache[tipo] = [dirruns, nodeIndex, diff];
									quebrar;
								}
							}

						} outro {

							// Usa o índice do elemento previamente armazenado em cache, se disponível
							if (useCache) {
								outerCache = elemento[expandir] || (elem[expandir] = {});
								cache = outerCache[ tipo ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diferença = nodeIndex;
							}

							// xml :nth-filho(...)
							// ou :nth-last-child(...) ou :nth(-last)?-of-type(...)
							if (diferença === falso) {

								// Use o mesmo loop acima para buscar `elem` desde o início
								while ( (nó = ++nodeIndex && nó && nó[ dir ] ||
									(diff = nodeIndex = 0) || start.pop() ) ) {

									if ((doTipo?
										nodeName(nó, nome):
										node.nodeType === 1) &&
										++diferença) {

										// Armazena em cache o índice de cada elemento encontrado
										if (useCache) {
											outerCache = node[expandir] ||
												(nó[expandido] = {});
											outerCache[ tipo ] = [ dirruns, diff ];
										}

										if (nó === elemento) {
											quebrar;
										}
									}
								}
							}
						}

						//Incorpore o deslocamento e verifique o tamanho do ciclo
						diferença -= último;
						retornar diferença === primeiro || (diff % primeiro === 0 && diff / primeiro >= 0 );
					}
				};
		},

		PSEUDO: função(pseudo, argumento) {

			//nomes de pseudoclasses não diferenciam maiúsculas de minúsculas
			// https://www.w3.org/TR/selectors/#pseudo-classes
			// Prioriza por distinção entre maiúsculas e minúsculas caso pseudos personalizados sejam adicionados com letras maiúsculas
			//Lembre-se que setFilters herda de pseudos
			var argumentos,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					find.error("pseudo não suportado:" + pseudo);

			// O usuário pode usar createPseudo para indicar que
			// argumentos são necessários para criar a função de filtro
			// assim como o jQuery faz
			if (fn[expandir]) {
				retornar fn(argumento);
			}

			// Mas mantenha o suporte para assinaturas antigas
			if (fn.comprimento > 1) {
				args = [pseudo, pseudo, "", argumento];
				retornar Expr.setFilters.hasOwnProperty(pseudo.toLowerCase())?
					markFunction(função(semente, correspondências) {
						var idx,
							correspondido = fn(semente, argumento),
							i = comprimento correspondente;
						enquanto eu-- ) {
							idx = indexOf.call(semente, correspondente[i]);
							semente [idx] =! (corresponde a [idx] = corresponde a [i]);
						}
					} ):
					função (elemento) {
						return fn(elem, 0, argumentos);
					};
			}

			retornar fn;
		}
	},

	pseudos: {

		// Pseudos potencialmente complexos
		não: markFunction( function( seletor ) {

			//Corta o seletor passado para compilar
			// para evitar o tratamento inicial e final
			//espaços como combinadores
			var entrada = [],
				resultados = [],
				matcher = compile( selector.replace( rtrimCSS, "$1" ) );

			retornar matcher[expandido] ?
				markFunction(função(semente, correspondências, _context, xml) {
					var elemento,
						incomparável = matcher(seed, null, xml, [] ),
						i = semente.comprimento;

					// Combina elementos não correspondidos por `matcher`
					enquanto eu-- ) {
						if ((elem = incomparável[i])) {
							semente[ i ] = !( corresponde a[ i ] = elem );
						}
					}
				} ):
				function(elem, _contexto, xml) {
					entrada[ 0 ] = elemento;
					matcher(entrada,nulo,xml,resultados);

					//Não guarde o elemento
					// (veja https://github.com/jquery/sizzle/issues/299)
					entrada[ 0 ] = nulo;
					retornar !resultados.pop();
				};
		} ),

		tem: markFunction( function( seletor ) {
			função de retorno (elemento) {
				return find(seletor, elem).length > 0;
			};
		} ),

		contém: markFunction( function( texto ) {
			texto = text.replace(runescape,funescape);
			função de retorno (elemento) {
				return (elem.textContent || jQuery.text( elem ) ).indexOf( text ) > -1;
			};
		} ),

		// "Se um elemento é representado por um seletor :lang()
		// é baseado apenas no valor de idioma do elemento
		// sendo igual ao identificador C,
		// ou começando com o identificador C imediatamente seguido de "-".
		// A correspondência de C com o valor de idioma do elemento é realizada sem distinção entre maiúsculas e minúsculas.
		// O identificador C não precisa ser um nome de idioma válido."
		// https://www.w3.org/TR/selectors/#lang-pseudo
		lang: markFunction( function( lang ) {

			// o valor do idioma deve ser um identificador válido
			if ( !ridentifier.test( lang || "" ) ) {
				find.error( "idioma não suportado: " + lang );
			}
			lang = lang.replace(runescape, funescape).toLowerCase();
			função de retorno (elemento) {
				var elemLang;
				fazer {
					if ((elemLang=documentIsHTML?
						elem.lang:
						elem.getAttribute("xml:lang" ) || elem.getAttribute("lang" ) ) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === idioma || elemLang.indexOf(lang + "-" ) === 0;
					}
				} while ((elem = elem.parentNode) && elem.nodeType === 1);
				retorna falso;
			};
		} ),

		// Diversos
		alvo: função (elem) {
			var hash = window.location && window.location.hash;
			retornar hash && hash.slice( 1 ) === elem.id;
		},

		raiz: função (elem) {
			return elemento === documentElement;
		},

		foco: função (elem) {
			return elemento === safeActiveElement() &&
				document.hasFocus() &&
				!!( elem.type || elem.href || ~elem.tabIndex );
		},

		// Propriedades booleanas
		habilitado: createDisabledPseudo(false),
		desabilitado: createDisabledPseudo(true),

		verificado: function(elem) {

			// Em CSS3, :checked deve retornar elementos verificados e selecionados
			// https://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			return (nodeName(elem, "input" ) && !!elem.checked ) ||
				(nodeName(elem, "opção" ) && !!elem.selected );
		},

		selecionado: function(elem) {

			// Suporte: IE <=11+
			// Acessando a propriedade selectIndex
			//força o navegador a tratar a opção padrão como
			// selecionado quando em um optgroup.
			if (elem.parentNode) {
				// eslint-disable-next-line sem expressões não utilizadas
				elem.parentNode.selectedIndex;
			}

			retornar elem.selected === verdadeiro;
		},

		// Conteúdo
		vazio: function(elem) {

			// https://www.w3.org/TR/selectors/#empty-pseudo
			// :empty é negado pelo elemento (1) ou nós de conteúdo (texto: 3; cdata: 4; entidade ref: 5),
			// mas não por outros (comentário: 8; instrução de processamento: 7; etc.)
			// nodeType < 6 funciona porque os atributos (2) não aparecem como filhos
			for (elem = elem.firstChild; elem; elem = elem.nextSibling) {
				if (elem.nodeType <6) {
					retorna falso;
				}
			}
			retornar verdadeiro;
		},

		pai: função (elem) {
			return !Expr.pseudos.empty( elem );
		},

		//Elemento/tipos de entrada
		cabeçalho: função (elem) {
			retornar rheader.test(elem.nodeName);
		},

		entrada: função (elem) {
			return rinputs.test(elem.nodeName);
		},

		botão: função( elemento ) {
			return nodeName(elem, "input" ) && elem.type === "botão" ||
				nodeName(elem, "botão");
		},

		texto: função (elemento) {
			var attr;
			return nodeName(elem, "input" ) && elem.type === "texto" &&

				// Suporte: apenas IE <10
				// Novos valores de atributos HTML5 (por exemplo, "pesquisa") aparecem
				// com elem.type === "texto"
				( (attr = elem.getAttribute( "tipo" ) ) == nulo ||
					attr.toLowerCase() === "texto");
		},

		// Posição na coleção
		primeiro: createPositionalPseudo( function() {
			retornar [0];
		} ),

		último: createPositionalPseudo( function( _matchIndexes, length ) {
			retornar [comprimento - 1];
		} ),

		eq: createPositionalPseudo(função(_matchIndexes, comprimento, argumento) {
			retornar [argumento <0? argumento + comprimento: argumento];
		} ),

		par: createPositionalPseudo( function( matchIndexes, length ) {
			var eu = 0;
			for ( ; i < comprimento; i += 2 ) {
				matchIndexes.push(i);
			}
			retornar matchIndexes;
		} ),

		ímpar: createPositionalPseudo( function( matchIndexes, length ) {
			var eu = 1;
			for ( ; i < comprimento; i += 2 ) {
				matchIndexes.push(i);
			}
			retornar matchIndexes;
		} ),

		lt: createPositionalPseudo(função(matchIndexes, comprimento, argumento) {
			var eu;

			se (argumento <0) {
				i = argumento + comprimento;
			} else if (argumento > comprimento) {
				eu = comprimento;
			} outro {
				i = argumento;
			}

			para ( ; --i >= 0; ) {
				matchIndexes.push(i);
			}
			retornar matchIndexes;
		} ),

		gt: createPositionalPseudo(função(matchIndexes, comprimento, argumento) {
			var i = argumento <0? argumento + comprimento: argumento;
			for ( ; ++i < comprimento; ) {
				matchIndexes.push(i);
			}
			retornar matchIndexes;
		} )
	}
};

Expr.pseudos.nth = Expr.pseudos.eq;

// Adiciona pseudos de botão/tipo de entrada
for (i in {rádio: verdadeiro, caixa de seleção: verdadeiro, arquivo: verdadeiro, senha: verdadeiro, imagem: verdadeiro }) {
	Expr.pseudos[i] = createInputPseudo(i);
}
for (i in {enviar: verdadeiro, redefinir: verdadeiro }) {
	Expr.pseudos[i] = createButtonPseudo(i);
}

//API fácil para criar novos setFilters
função setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

function tokenize (seletor, parseOnly) {
	var correspondente, correspondência, tokens, tipo,
		até agora, grupos, pré-filtros,
		cached = tokenCache[seletor + " "];

	if (em cache) {
		retornar analisar somente? 0: cached.slice(0);
	}

	até agora = seletor;
	grupos = [];
	préFiltros = Expr.preFilter;

	enquanto (até agora) {

		// Vírgula e primeira execução
		if (!correspondido || (correspondência = rcomma.exec(soFar))) {
			se (corresponder) {

				// Não considere as vírgulas finais como válidas
				soFar = soFar.slice(correspondência[ 0 ].comprimento ) || até aqui;
			}
			grupos.push((tokens=[]));
		}

		correspondido = falso;

		// Combinadores
		if ((correspondência = rleadingCombinator.exec(soFar))) {
			correspondido = match.shift();
			tokens.push({
				valor: combinado,

				// Lança combinadores descendentes para o espaço
				tipo: match[ 0 ].replace( rtrimCSS, " " )
			} );
			soFar = soFar.slice(matched.length);
		}

		// Filtros
		for (digite Expr.filter) {
			if ( (match = matchExpr[ type ].exec( soFar ) ) && ( !preFilters[ type ] ||
				(correspondência = pré-filtros[tipo](correspondência))))) {
				correspondido = match.shift();
				tokens.push({
					valor: combinado,
					tipo: tipo,
					correspondências: combinar
				} );
				soFar = soFar.slice(matched.length);
			}
		}

		if ( !correspondido ) {
			quebrar;
		}
	}

	// Retorna o comprimento do excesso inválido
	// se estivermos apenas analisando
	// Caso contrário, lança um erro ou retorna tokens
	if (parseOnly) {
		retornar até agora.length;
	}

	retornar até agora?
		find.error(seletor):

		// Armazena em cache os tokens
		tokenCache(seletor, grupos).slice( 0 );
}

função toSelector(tokens) {
	var eu = 0,
		len = tokens.comprimento,
		seletor = "";
	for ( ; i < len; i++ ) {
		seletor += tokens[ i ].value;
	}
	seletor de retorno;
}

function addCombinator(correspondente, combinador, base) {
	var dir = combinador.dir,
		pular = combinador.próximo,
		chave = pular || diretório,
		checkNonElements = base && key === "parentNode",
		feitoNome = feito++;

	retornar combinador.primeiro?

		// Verifica o elemento ancestral/precedente mais próximo
		function(elem, contexto, xml) {
			while ( (elem = elem[diretório])) {
				if (elem.nodeType === 1 || checkNonElements) {
					return matcher(elem, contexto, xml);
				}
			}
			retorna falso;
		}:

		// Verifica todos os elementos ancestrais/precedentes
		function(elem, contexto, xml) {
			var oldCache, outerCache,
				newCache = [dirruns, doneName];

			// Não podemos definir dados arbitrários em nós XML, portanto eles não se beneficiam do cache combinador
			se(xml){
				while ( (elem = elem[diretório])) {
					if (elem.nodeType === 1 || checkNonElements) {
						if (matcher(elem, contexto, xml)) {
							retornar verdadeiro;
						}
					}
				}
			} outro {
				while ( (elem = elem[diretório])) {
					if (elem.nodeType === 1 || checkNonElements) {
						outerCache = elemento[expandir] || (elem[expandir] = {});

						if (pular && nodeName(elem, pular)) {
							elem = elem[diretório] || elemento;
						} else if ((oldCache = outerCache[chave]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Atribui ao newCache para que os resultados sejam propagados de volta para os elementos anteriores
							return (novoCache[ 2 ] = antigoCache[ 2 ] );
						} outro {

							// Reutiliza o newcache para que os resultados sejam propagados de volta para os elementos anteriores
							outerCache[chave] = novoCache;

							// Uma partida significa que terminamos; uma falha significa que temos que continuar verificando
							if ((newCache[2] = matcher(elem, contexto, xml))) {
								retornar verdadeiro;
							}
						}
					}
				}
			}
			retorna falso;
		};
}

function elementMatcher(correspondentes) {
	retornar matchers.length > 1?
		function(elem, contexto, xml) {
			var i = matchers.length;
			enquanto eu-- ) {
				if (!matchers[i](elem, contexto, xml)) {
					retorna falso;
				}
			}
			retornar verdadeiro;
		}:
		correspondentes[0];
}

function multipleContexts(seletor, contextos, resultados) {
	var eu = 0,
		len = contextos.comprimento;
	for ( ; i < len; i++ ) {
		find(seletor, contextos[i], resultados);
	}
	retornar resultados;
}

function condensar(incomparável, mapa, filtro, contexto, xml) {
	var elemento,
		novoNão correspondido = [],
		eu = 0,
		len = comprimento incomparável,
		mapeado = mapa! = nulo;

	for ( ; i < len; i++ ) {
		if ((elem = incomparável[i])) {
			if (!filtro || filtro(elem, contexto, xml)) {
				newUnmatched.push(elem);
				if (mapeado) {
					mapa.push(i);
				}
			}
		}
	}

	retornar novoNão correspondido;
}

function setMatcher( pré-filtro, seletor, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expandido ] ) {
		postFilter = setMatcher(postFilter);
	}
	if ( postFinder && !postFinder[ expandido ] ) {
		postFinder = setMatcher(postFinder, postSelector);
	}
	return markFunction(função(semente, resultados, contexto, xml) {
		var temp, i, elem, matcherOut,
			préMapa = [],
			postMapa = [],
			preexistente = resultados.comprimento,

			// Obtém os elementos iniciais da semente ou do contexto
			elementos = semente ||
				multipleContexts(seletor || "*",
					contexto.nodeType? [ contexto ] : contexto, [] ),

			// Pré-filtre para obter a entrada do matcher, preservando um mapa para sincronização dos resultados iniciais
			matcherIn = pré-filtro && (seed || !selector ) ?
				condensar(elems, preMap, preFilter, context, xml):
				elementos;

		if (correspondente) {

			// Se tivermos um postFinder, ou semente filtrada, ou postFilter não semente
			// ou resultados preexistentes,
			matcherOut = postFinder || (seed?preFilter: preexistente || postFilter)?

				// ...processamento intermediário é necessário
				[]:

				// ...caso contrário, use os resultados diretamente
				resultados;

			//Encontre correspondências primárias
			matcher(matcherIn, matcherOut, contexto, xml);
		} outro {
			matcherOut = matcherIn;
		}

		//Aplica postFilter
		if (postFiltro) {
			temp = condensar(matcherOut, postMap);
			postFilter(temp, [], contexto, xml);

			// Desfaz a correspondência dos elementos com falha, movendo-os de volta para matcherIn
			i = temp.comprimento;
			enquanto eu-- ) {
				if ((elem = temp[i])) {
					matcherOut[ postMap[ i ] ] = !( matcherIn[ postMap[ i ] ] = elem );
				}
			}
		}

		if (semente) {
			if (postFinder || pré-filtro) {
				if (pósFinder) {

					// Obtenha o matcherOut final condensando este intermediário em contextos postFinder
					temperatura = [];
					i = matcherOut.length;
					enquanto eu-- ) {
						if ((elem = matcherOut[i])) {

							// Restaura matcherIn já que elem ainda não é uma correspondência final
							temp.push((matcherIn[i]=elem));
						}
					}
					postFinder(nulo, (matcherOut = []), temp, xml);
				}

				// Move os elementos correspondentes da semente para os resultados para mantê-los sincronizados
				i = matcherOut.length;
				enquanto eu-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder? indexOf.call(seed, elem): preMap[i]) > -1) {

						semente[temp] =!(resultados[temp] = elem);
					}
				}
			}

		//Adiciona elementos aos resultados, através do postFinder se definido
		} outro {
			matcherOut = condensar(
				matcherOut === resultados?
					matcherOut.splice (preexistente, matcherOut.length):
					matcherOut
			);
			if (pósFinder) {
				postFinder(nulo, resultados, matcherOut, xml);
			} outro {
				push.apply(resultados, matcherOut);
			}
		}
	} );
}

função matcherFromTokens(tokens) {
	var checkContext, matcher, j,
		len = tokens.comprimento,
		líderRelativo = Expr.relativo[tokens[ 0 ].tipo ],
		implícitoRelativo = líderRelativo || Expr.relativo[ " " ],
		i = líderRelativo? 1: 0,

		// O matcher fundamental garante que os elementos sejam acessíveis a partir de contexto(s) de nível superior
		matchContext = addCombinator( function( elemento ) {
			return elemento === checkContext;
		}, implícitoRelativo, verdadeiro ),
		matchAnyContext = addCombinator( function(elem) {
			retornar indexOf.call(checkContext, elem) > -1;
		}, implícitoRelativo, verdadeiro ),
		matchers = [função(elem, contexto, xml) {

			// Suporte: IE 11+, Edge 17 - 18+
			// O IE/Edge às vezes gera um erro de "Permissão negada" ao comparar rigorosamente
			//dois documentos; comparações superficiais funcionam.
			// eslint-disable-next-line eqeqeq
			var ret = ( !leadingRelative && ( xml || context != outermostContext ) ) || (
				(checkContext=contexto).nodeType?
					matchContext(elem, contexto, xml):
					matchAnyContext(elem, contexto, xml));

			// Evite pendurar no elemento
			// (veja https://github.com/jquery/sizzle/issues/299)
			checkContext=nulo;
			retornar ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[ i ].type ] ) ) {
			matchers = [addCombinator(elementMatcher(matchers), matcher)];
		} outro {
			matcher = Expr.filter[ tokens[ i ].type ].apply( null, tokens[ i ].matches );

			// Retorna especial ao ver um matcher posicional
			if (matcher[expandir]) {

				// Encontre o próximo operador relativo (se houver) para tratamento adequado
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[tokens[ j ].type ] ) {
						quebrar;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher(correspondentes),
					i > 1 && toSelector(

						// Se o token anterior for um combinador descendente, insira um qualquer elemento implícito `*`
						tokens.slice(0, i - 1)
							.concat( { valor: tokens[ i - 2 ].type === " " ? "*" : "" } )
					).replace( rtrimCSS, "$1" ),
					combinador,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( ( tokens = tokens.slice( j ) ) ),
					j <len && toSelector(tokens)
				);
			}
			matchers.push(matcher);
		}
	}

	return elementMatcher(correspondentes);
}

função matcherFromGroupMatchers(elementMatchers, setMatchers) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function(semente, contexto, xml, resultados, mais externo) {
			var elemento, j, correspondente,
				contagem correspondente = 0,
				eu = "0",
				incomparável = semente && [],
				setMatched = [],
				contextBackup = outerContext,

				// Devemos sempre ter elementos iniciais ou contexto mais externo
				elementos = semente || byElement && Expr.find.TAG( "*", mais externo ),

				// Use dirruns inteiros se este for o matcher mais externo
				dirrunsUnique = ( dirruns += contextBackup == null ? 1 : Math.random() || 0.1 ),
				len = elementos.comprimento;

			if (mais externo) {

				// Suporte: IE 11+, Edge 17 - 18+
				// O IE/Edge às vezes gera um erro de "Permissão negada" ao comparar rigorosamente
				//dois documentos; comparações superficiais funcionam.
				// eslint-disable-next-line eqeqeq
				outermostContext = contexto == documento || contexto || mais externo;
			}

			//Adiciona elementos passando elementMatchers diretamente aos resultados
			// Suporte: iOS <=7 - 9 apenas
			// Tolera propriedades de NodeList (IE: "comprimento"; Safari: <número>) correspondentes
			//elementos por id. (ver trac-14142)
			for ( ; i !== len && ( elem = elems[ i ] ) != null; i++ ) {
				if (byElement && elem) {
					j = 0;

					// Suporte: IE 11+, Edge 17 - 18+
					// O IE/Edge às vezes gera um erro de "Permissão negada" ao comparar rigorosamente
					//dois documentos; comparações superficiais funcionam.
					// eslint-disable-next-line eqeqeq
					if ( !context && elem.ownerDocument != documento ) {
						setDocument(elem);
						xml = !documentIsHTML;
					}
					while ((matcher = elementMatchers[j++])) {
						if (matcher(elem, contexto || documento, xml)) {
							push.call(resultados,elem);
							quebrar;
						}
					}
					if (mais externo) {
						dirruns = dirrunsUnique;
					}
				}

				// Rastreia elementos incomparáveis ​​para filtros definidos
				if (porSet) {

					// Eles terão passado por todos os matchers possíveis
					if ( (elem = !matcher && elem ) ) {
						matchedCount--;
					}

					// Aumenta o array para cada elemento, correspondente ou não
					if (semente) {
						incomparável.push(elem);
					}
				}
			}

			// `i` agora é a contagem de elementos visitados acima, e adicionando-a a `matchedCount`
			// torna o último não negativo.
			Contagemcorrespondente += i;

			//Aplica filtros definidos a elementos sem correspondência
			// NOTA: Isto pode ser ignorado se não houver elementos sem correspondência (ou seja, `matchedCount`
			// é igual a `i`), a menos que não tenhamos visitado _qualquer_ elemento no loop acima porque temos
			// sem correspondência de elemento e sem semente.
			//Incrementar uma string inicial "0" `i` permite que `i` permaneça uma string apenas naquele
			// case, que resultará em um "00" `matchedCount` que difere de `i`, mas também é
			// numericamente zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ((matcher = setMatchers[j++])) {
					matcher(incomparável, setMatched, context, xml);
				}

				if (semente) {

					//Reintegra as correspondências dos elementos para eliminar a necessidade de classificação
					if (contagemcorrespondente > 0) {
						enquanto eu-- ) {
							if ( !( incomparável[ i ] || setMatched[ i ] ) ) {
								setMatched[i] = pop.call(resultados);
							}
						}
					}

					// Descarta os valores do espaço reservado do índice para obter apenas correspondências reais
					setMatched = condensar(setMatched);
				}

				//Adiciona correspondências aos resultados
				push.apply(resultados, setMatched);

				// Correspondências de conjuntos sem sementes que sucedem vários matchers bem-sucedidos estipulam a classificação
				if (mais externo && !seed && setMatched.length > 0 &&
					(matchedCount + setMatchers.length) > 1) {

					jQuery.uniqueSort(resultados);
				}
			}

			// Substitui a manipulação de globais por matchers aninhados
			if (mais externo) {
				dirruns = dirrunsUnique;
				outerContext=contextBackup;
			}

			retornar incomparável;
		};

	retornar porSet ?
		markFunction(superMatcher):
		superMatcher;
}

function compile( selector, match /* Somente para uso interno */ ) {
	var eu,
		setMatchers = [],
		elementoMatchers = [],
		cached = compilerCache[seletor + " "];

	if ( !cache ) {

		//Gera uma função de funções recursivas que pode ser usada para verificar cada elemento
		se (!corresponder){
			match = tokenize(seletor);
		}
		i = correspondência.comprimento;
		enquanto eu-- ) {
			cached = matcherFromTokens(correspondência[i]);
			if (em cache[expandir]) {
				setMatchers.push(em cache);
			} outro {
				elementMatchers.push(em cache);
			}
		}

		// Armazena em cache a função compilada
		cached = compilerCache(seletor,
			matcherFromGroupMatchers(elementMatchers, setMatchers));

		//Salva seletor e tokenização
		cached.selector = seletor;
	}
	retornar em cache;
}

/**
 * Uma função de seleção de baixo nível que funciona com arquivos compilados do jQuery
 * funções de seletor
 * @param {String|Function} selector Um seletor ou um pré-compilado
 * função de seletor construída com compilação de seletor jQuery
 * @param {Elemento} contexto
 * @param {Array} [resultados]
 * @param {Array} [seed] Um conjunto de elementos para correspondência
 */
function select(seletor, contexto, resultados, semente) {
	var i, tokens, token, tipo, localizar,
		compilado = seletor de tipo === "função" && seletor,
		match = !seed && tokenize( (seletor = compilado.seletor || seletor));

	resultados = resultados || [];

	// Tenta minimizar as operações se houver apenas um seletor na lista e nenhuma semente
	// (este último nos garante contexto)
	if (correspondência.comprimento === 1) {

		// Reduz o contexto se o seletor composto inicial for um ID
		tokens = combinar[ 0 ] = combinar[ 0 ].slice( 0 );
		if ( tokens.length > 2 && ( token = tokens[ 0 ] ).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[ 1 ].type ] ) {

			contexto = (Expr.find.ID(
				token.matches[ 0 ].replace( runescape, funescape ),
				contexto
			) || [] )[ 0 ];
			if (!contexto) {
				retornar resultados;

			// Matchers pré-compilados ainda verificarão a ancestralidade, então suba de nível
			} else if (compilado) {
				contexto = contexto.parentNode;
			}

			seletor = seletor.slice(tokens.shift().value.length);
		}

		//Busca um conjunto de sementes para correspondência da direita para a esquerda
		i = matchExpr.needsContext.test(seletor)? 0: tokens.comprimento;
		enquanto eu-- ) {
			ficha = fichas[i];

			// Aborta se acertarmos um combinador
			if (Expr.relative[ (type = token.type)]) {
				quebrar;
			}
			if ((encontrar = Expr.find[tipo])) {

				// Pesquisa, expandindo o contexto para os principais combinadores de irmãos
				if ((semente = encontrar(
					token.matches[ 0 ].replace( runescape, funescape ),
					rsibling.test(tokens[0].tipo) &&
						testContext(context.parentNode) || contexto
				) ) ) {

					// Se a semente estiver vazia ou não restar nenhum token, podemos retornar mais cedo
					tokens.splice(i, 1);
					seletor = seed.length && toSelector(tokens);
					if ( !seletor ) {
						push.apply(resultados, semente);
						retornar resultados;
					}

					quebrar;
				}
			}
		}
	}

	// Compila e executa uma função de filtragem se nenhuma for fornecida
	// Fornece `match` para evitar a retokenização se modificarmos o seletor acima
	(compilado || compilar(seletor, correspondência))(
		semente,
		contexto,
		!documentIsHTML,
		resultados,
		!contexto || rsibling.test(seletor) && testContext(context.parentNode) || contexto
	);
	retornar resultados;
}

//Tarefas únicas

// Suporte: Android <=4.0 - 4.1+
//Classifica a estabilidade
support.sortStable = expando.split( "" ).sort( sortOrder ).join( "" ) === expando;

// Inicializa no documento padrão
setDocument();

// Suporte: Android <=4.0 - 4.1+
// Nós separados seguem *uns aos outros* de forma confusa
suporte.sortDetached=asser(função(el){

	// Deve retornar 1, mas retorna 4 (seguindo)
	return el.compareDocumentPosition(document.createElement( "fieldset") ) & 1;
} );

jQuery.find=encontrar;

// Descontinuada
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.unique = jQuery.uniqueSort;

// Estes sempre foram privados, mas costumavam ser documentados como parte de
// Sizzle, então vamos mantê-los por enquanto para fins de compatibilidade com versões anteriores.
encontrar.compile = compilar;
encontrar.select = selecionar;
find.setDocument = setDocument;
encontrar.tokenize = tokenizar;

encontrar.escape = jQuery.escapeSelector;
encontrar.getText = jQuery.text;
encontrar.isXML = jQuery.isXMLDoc;
find.seletores = jQuery.expr;
encontrar.suporte = jQuery.suporte;
encontrar.uniqueSort = jQuery.uniqueSort;

	/* eslint-enable */

} )();


var dir = function(elem, dir, até) {
	var correspondente = [],
		truncar = até! == indefinido;

	while ( (elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if (elem.nodeType === 1) {
			if (truncar && jQuery(elem).is(até)) {
				quebrar;
			}
			correspondido.push(elem);
		}
	}
	retorno correspondido;
};


var irmãos = function(n, elem) {
	var correspondente = [];

	para (; n; n = n.próximo irmão) {
		if ( n.nodeType === 1 && n !== elem ) {
			correspondido.push(n);
		}
	}

	retorno correspondido;
};


var rneedsContext = jQuery.expr.match.needsContext;

var rsingleTag = ( /^<([az][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>( ?:<\/\1>|)$/i );



// Implemente a funcionalidade idêntica para filtro e não
function winnow(elementos, qualificador, não) {
	if (isFunction(qualificador)) {
		retornar jQuery.grep(elementos, função(elem, i) {
			return !!qualifier.call( elem, i, elem ) !== não;
		} );
	}

	// Elemento único
	if (qualificador.nodeType) {
		retornar jQuery.grep(elementos, função(elem) {
			return (elem === qualificador)! == não;
		} );
	}

	// Arraylike de elementos (jQuery, argumentos, Array)
	if ( qualificador typeof !== "string" ) {
		retornar jQuery.grep(elementos, função(elem) {
			return (indexOf.call(qualificador, elem) > -1)!== não;
		} );
	}

	// Filtrado diretamente para seletores simples e complexos
	return jQuery.filter(qualificador, elementos, não);
}

jQuery.filter = function (expr, elementos, não) {
	var elemento = elementos[0];

	se não ) {
		expr = ":não(" + expr + ")";
	}

	if (elems.length === 1 && elem.nodeType === 1) {
		retornar jQuery.find.matchesSelector(elem, expr)? [elemento]: [];
	}

	retornar jQuery.find.matches(expr, jQuery.grep(elems, function(elem) {
		retornar elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend({
	encontrar: function(seletor) {
		var i, ret,
			len = este.comprimento,
			eu = isto;

		if (seletor de tipo! == "string" ) {
			retornar this.pushStack(jQuery(seletor).filter(função() {
				for ( i = 0; i < len; i++ ) {
					if (jQuery.contains(self[i], this)) {
						retornar verdadeiro;
					}
				}
			} ) );
		}

		ret = this.pushStack([]);

		for ( i = 0; i < len; i++ ) {
			jQuery.find(seletor, self[i], ret);
		}

		retornar len > 1 ? jQuery.uniqueSort(ret): ret;
	},
	filtro: function(seletor) {
		return this.pushStack( winnow( this, seletor || [], false ) );
	},
	não: function(seletor) {
		return this.pushStack( winnow( this, seletor || [], true ) );
	},
	é: function(seletor) {
		retornar !!janeirar(
			esse,

			// Se este for um seletor posicional/relativo, verifica a associação no conjunto retornado
			// então $("p:first").is("p:last") não retornará verdadeiro para um documento com dois "p".
			seletor typeof === "string" && rneedsContext.test (seletor)?
				jQuery (seletor):
				seletor || [],
			falso
		).comprimento;
	}
} );


// Inicializa um objeto jQuery


// Uma referência central para a raiz jQuery(document)
var rootjQuery,

	// Uma maneira simples de verificar strings HTML
	// Priorize #id sobre <tag> para evitar XSS via location.hash (trac-9521)
	// Reconhecimento estrito de HTML (trac-11290: deve começar com <)
	// Atalho simples #id case para velocidade
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function(seletor, contexto, raiz) {
		var correspondência, elemento;

		// HANDLE: $(""), $(nulo), $(indefinido), $(falso)
		if ( !seletor ) {
			devolva isso;
		}

		// O método init() aceita um rootjQuery alternativo
		// então a migração pode suportar jQuery.sub (gh-2101)
		raiz = raiz || rootjQuery;

		// Lida com strings HTML
		if (seletor de tipo === "string" ) {
			if (seletor[ 0 ] === "<" &&
				seletor[seletor.comprimento - 1] === ">" &&
				seletor.comprimento >= 3) {

				// Suponha que as strings que começam e terminam com <> sejam HTML e pule a verificação de regex
				match = [nulo, seletor, nulo];

			} outro {
				match = rquickExpr.exec(seletor);
			}

			// Corresponde ao html ou certifique-se de que nenhum contexto seja especificado para #id
			if (corresponder && (corresponder [1] ||! contexto)) {

				//HANDLE: $(html) -> $(array)
				if (corresponder[1]) {
					contexto = contexto instância do jQuery? contexto[ 0 ] : contexto;

					// A opção de executar scripts é verdadeira para retrocompatibilidade
					// Intencionalmente deixa o erro ser lançado se parseHTML não estiver presente
					jQuery.merge(isto, jQuery.parseHTML(
						combinar[1],
						contexto && contexto.nodeType? contexto.proprietárioDocumento || contexto: documento,
						verdadeiro
					));

					// HANDLE: $(html, adereços)
					if (rsingleTag.test(correspondência[1]) && jQuery.isPlainObject(contexto)) {
						for (correspondência no contexto) {

							// Propriedades do contexto são chamadas como métodos, se possível
							if (isFunction(esta[correspondência])) {
								esta[correspondência](contexto[correspondência]);

							// ...e caso contrário definido como atributos
							} outro {
								this.attr(correspondência, contexto[correspondência]);
							}
						}
					}

					devolva isso;

				//HANDLE: $(#id)
				} outro {
					elem = document.getElementById(correspondência[2]);

					se (elemento) {

						//Injeta o elemento diretamente no objeto jQuery
						este[0] = elemento;
						este.comprimento = 1;
					}
					devolva isso;
				}

			//HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return (contexto || root).find(seletor);

			// HANDLE: $(expr, contexto)
			// (que é equivalente a: $(context).find(expr)
			} outro {
				retornar this.constructor(contexto).find(seletor);
			}

		//HANDLE: $(DOMElement)
		} else if (seletor.nodeType) {
			este[ 0 ] = seletor;
			este.comprimento = 1;
			devolva isso;

		//HANDLE: $(função)
		//Atalho para documento pronto
		} else if (isFunction(seletor)) {
			retornar root.ready! == indefinido?
				root.ready (seletor):

				// Executa imediatamente se ready não estiver presente
				seletor(jQuery);
		}

		return jQuery.makeArray(seletor, this);
	};

// Fornece à função init o protótipo jQuery para instanciação posterior
init.prototype = jQuery.fn;

// Inicializa a referência central
rootjQuery = jQuery(documento);


var rparentsprev = /^(?:parents|prev(?:Até|Todos))/,

	// Métodos garantidos para produzir um conjunto único ao iniciar a partir de um conjunto único
	garantidoUnique = {
		crianças: verdade,
		conteúdo: verdadeiro,
		próximo: verdadeiro,
		anterior: verdadeiro
	};

jQuery.fn.extend({
	tem: função (alvo) {
		var alvos = jQuery( alvo, este ),
			l = alvos.comprimento;

		retorne este.filtro(função() {
			var eu = 0;
			para ( ; eu < l; i++ ) {
				if (jQuery.contains(este, alvos[i])) {
					retornar verdadeiro;
				}
			}
		} );
	},

	mais próximo: function( seletores, contexto ) {
		var cur,
			eu = 0,
			l = este.comprimento,
			correspondido = [],
			alvos = seletores de tipo! == "string" && jQuery (seletores);

		// Seletores posicionais nunca coincidem, pois não há contexto de _seleção_
		if (!rneedsContext.test(seletores)) {
			para ( ; eu < l; i++ ) {
				for (cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Sempre pula fragmentos do documento
					if (cur.nodeType < 11 && (alvos?
						alvos.index(cur) > -1:

						// Não passe não-elementos para jQuery#find
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, seletores ) ) ) {

						correspondido.push(cur);
						quebrar;
					}
				}
			}
		}

		retorne this.pushStack (correspondido.comprimento> 1? jQuery.uniqueSort (correspondido): combinado);
	},

	// Determina a posição de um elemento dentro do conjunto
	índice: função (elem) {

		// Sem argumento, retorna índice no pai
		se (!elem) {
			retornar (este[0] && este[0].parentNode)? this.first().prevAll().length : -1;
		}

		//Índice no seletor
		if (typeof elemento === "string" ) {
			retornar indexOf.call(jQuery(elem), this[0]);
		}

		//Localiza a posição do elemento desejado
		retornar indexOf.call (isto,

			// Se receber um objeto jQuery, o primeiro elemento será usado
			elem.jquery? elemento[0]: elemento
		);
	},

	adicione: function(seletor, contexto) {
		retorne isto.pushStack(
			jQuery.uniqueSort(
				jQuery.merge(this.get(), jQuery(seletor, contexto))
			)
		);
	},

	addBack: function(seletor) {
		retornar this.add(seletor == null?
			this.prevObject: this.prevObject.filter (seletor)
		);
	}
} );

função irmão( cur, dir ) {
	while ((cur = cur[dir]) && cur.nodeType! == 1) {}
	retornar cur;
}

jQuery.each({
	pai: função (elem) {
		var pai = elem.parentNode;
		retornar pai && pai.nodeType !== 11 ? pai: nulo;
	},
	pais: function(elem) {
		return dir(elem, "parentNode");
	},
	paisUntil: function(elem, _i, até) {
		return dir(elem, "parentNode", até );
	},
	próximo: function(elem) {
		return irmão(elem, "próximo irmão");
	},
	anterior: função (elem) {
		return irmão(elem, "anteriorIrmão");
	},
	próximoTodos: função(elem) {
		return dir(elem, "próximo irmão");
	},
	prevAll: function(elem) {
		return dir(elem, "irmão anterior");
	},
	nextUntil: function(elem, _i, até) {
		return dir(elem, "próximo irmão", até );
	},
	prevUntil: function(elem, _i, até) {
		return dir(elem, "irmão anterior", até );
	},
	irmãos: function(elem) {
		retornar irmãos( ( elem.parentNode || {} ).firstChild, elem );
	},
	filhos: função (elem) {
		retornar irmãos( elem.firstChild );
	},
	conteúdo: função (elem) {
		if (elem.contentDocument! = null &&

			// Suporte: IE 11+
			// Elementos <object> sem atributo `data` possuem um objeto
			// `contentDocument` com um protótipo `null`.
			getProto(elem.contentDocument)) {

			retornar elem.contentDocument;
		}

		// Suporte: somente IE 9 - 11, somente iOS 7, navegador Android <= somente 4.3
		// Trata o elemento template como normal em navegadores que
		// não apoie isso.
		if (nodeName(elem, "modelo")) {
			elem = elem.content || elemento;
		}

		retornar jQuery.merge( [], elem.childNodes );
	}
}, função(nome, fn) {
	jQuery.fn[nome] = função(até, seletor) {
		var correspondido = jQuery.map(este, fn, até);

		if (nome.slice( -5 ) !== "Até" ) {
			seletor = até;
		}

		if (seletor && tipo de seletor === "string" ) {
			correspondido = jQuery.filter(seletor, correspondido);
		}

		if (este.comprimento > 1) {

			//Remove duplicatas
			if ( !garantidoUnique[ nome ] ) {
				jQuery.uniqueSort(correspondente);
			}

			// Ordem inversa para pais* e derivados anteriores
			if (rparentsprev.test(nome)) {
				correspondido.reverso();
			}
		}

		retorne this.pushStack(correspondente);
	};
} );
var rnothtmlbranco = ( /[^\x20\t\r\n\f]+/g );



// Converte opções formatadas em String em opções formatadas em Objeto
function criarOpções(opções) {
	objeto var = {};
	jQuery.each(opções.match(rnothtmlwhite) || [], function( _, flag ) {
		objeto[bandeira] = verdadeiro;
	} );
	objeto de retorno;
}

/*
 * Crie uma lista de retorno de chamada usando os seguintes parâmetros:
 *
 *opções: uma lista opcional de opções separadas por espaços que mudarão a forma como
 * a lista de retorno de chamada se comporta ou um objeto de opção mais tradicional
 *
 * Por padrão, uma lista de retorno de chamada funcionará como uma lista de retorno de evento e pode ser
 * "disparado" várias vezes.
 *
 * Opções possíveis:
 *
 * uma vez: garantirá que a lista de retorno de chamada só possa ser disparada uma vez (como um Adiado)
 *
 * memória: acompanhará os valores anteriores e chamará qualquer retorno de chamada adicionado
 * após a lista ter sido disparada imediatamente com o último "memorizado"
 * valores (como um Diferido)
 *
 * único: garantirá que um retorno de chamada só possa ser adicionado uma vez (sem duplicatas na lista)
 *
 * stopOnFalse: interrompe chamadas quando um retorno de chamada retorna falso
 *
 */
jQuery.Callbacks=função(opções){

	// Converte opções de formatação de string para formatação de objeto, se necessário
	// (verificamos o cache primeiro)
	opções = tipo de opções === "string" ?
		createOptions(opções):
		jQuery.extend({}, opções);

	var // Sinalizador para saber se a lista está sendo disparada no momento
		disparando,

		// Último valor de disparo para listas não esquecíveis
		memória,

		// Sinalizador para saber se a lista já foi disparada
		despedido,

		// Sinalizador para evitar disparo
		bloqueado,

		//Lista de retorno de chamada real
		lista = [],

		//Fila de dados de execução para listas repetíveis
		fila = [],

		// Índice do retorno de chamada atualmente disparado (modificado por adicionar/remover conforme necessário)
		índice de disparo = -1,

		// Dispara retornos de chamada
		fogo = função() {

			//Aplica disparo único
			bloqueado = bloqueado || opções.uma vez;

			// Executa callbacks para todas as execuções pendentes,
			// respeitando substituições de shootingIndex e alterações de tempo de execução
			disparado = disparando = verdadeiro;
			for ( ; queue.length; fireIndex = -1 ) {
				memória = fila.shift();
				while (++firingIndex <lista.comprimento) {

					//Executa o retorno de chamada e verifica o encerramento antecipado
					if (lista[fireIndex].apply(memória[0], memória[1]) === falso &&
						opções.stopOnFalse) {

						// Vá para o final e esqueça os dados para que .add não seja acionado novamente
						acendimentoIndex = lista.comprimento;
						memória = falso;
					}
				}
			}

			//Esqueça os dados se terminarmos com isso
			if (!options.memory) {
				memória = falso;
			}

			disparo = falso;

			// Limpe se terminarmos de atirar para sempre
			if (bloqueado) {

				// Mantém uma lista vazia se tivermos dados para futuras chamadas de adição
				se (memória) {
					lista = [];

				// Caso contrário, este objeto será gasto
				} outro {
					lista = "";
				}
			}
		},

		// Objeto de retornos de chamada reais
		eu = {

			//Adiciona um retorno de chamada ou uma coleção de retornos de chamada à lista
			adicione: função() {
				se (lista) {

					// Se tivermos memória de uma execução passada, devemos disparar após adicionar
					if (memória &&! disparo) {
						acendimentoIndex = list.length - 1;
						fila.push(memória);
					}

					(função adicionar(argumentos) {
						jQuery.each(args,função(_,arg){
							if (isFunção(arg)) {
								if ( !options.unique || !self.has( arg ) ) {
									lista.push(arg);
								}
							} else if (arg && arg.length && toType( arg ) !== "string" ) {

								//Inspeciona recursivamente
								adicionar(argumento);
							}
						} );
					} )( argumentos );

					if (memória &&! disparo) {
						fogo();
					}
				}
				devolva isso;
			},

			//Remove um callback da lista
			remover: função() {
				jQuery.each (argumentos, função (_, arg) {
					índice var;
					while ((índice = jQuery.inArray(arg, lista, índice)) > -1) {
						lista.splice(índice, 1);

						// Lida com índices de disparo
						if (índice <= índice de disparo) {
							índice de disparo--;
						}
					}
				} );
				devolva isso;
			},

			// Verifica se um determinado retorno de chamada está na lista.
			// Se nenhum argumento for fornecido, retorne se a lista possui retornos de chamada anexados ou não.
			tem: função (fn) {
				retornar fn?
					jQuery.inArray(fn, lista) > -1:
					lista.comprimento > 0;
			},

			//Remove todos os callbacks da lista
			vazio: function() {
				se (lista) {
					lista = [];
				}
				devolva isso;
			},

			// Desativa .fire e .add
			// Aborta qualquer execução atual/pendente
			// Limpa todos os retornos de chamada e valores
			desativar: função() {
				bloqueado = fila = [];
				lista = memória = "";
				devolva isso;
			},
			desabilitado: function() {
				retornar !lista;
			},

			//Desativa .fire
			// Desabilite também .add a menos que tenhamos memória (já que não teria efeito)
			//Aborta quaisquer execuções pendentes
			bloqueio: função() {
				bloqueado = fila = [];
				if (! memória &&! disparo) {
					lista = memória = "";
				}
				devolva isso;
			},
			bloqueado: function() {
				retornar !!bloqueado;
			},

			// Chama todos os retornos de chamada com o contexto e os argumentos fornecidos
			fireWith: function(contexto, args) {
				if ( !bloqueado ) {
					argumentos = argumentos || [];
					args = [contexto, args.slice? args.slice(): args];
					fila.push(args);
					if ( !disparando ) {
						fogo();
					}
				}
				devolva isso;
			},

			//Chama todos os callbacks com os argumentos fornecidos
			fogo: função() {
				self.fireWith(isto, argumentos);
				devolva isso;
			},

			//Para saber se os callbacks já foram chamados pelo menos uma vez
			disparado: function() {
				retornar !!disparado;
			}
		};

	retornar a si mesmo;
};


função Identidade (v) {
	retornar v;
}
função Lançador (ex) {
	jogue ex;
}

função adotarValue(valor, resolver, rejeitar, noValue) {
	método var;

	tentar {

		// Verifica primeiro o aspecto da promessa para privilegiar o comportamento síncrono
		if (valor && isFunction( (método = valor.promise))) {
			método.call(valor).done(resolver).fail(rejeitar);

		// Outros entãoables
		} else if (valor && isFunction( (método = valor.então))) {
			método.call(valor, resolução, rejeição);

		// Outros não-thenables
		} outro {

			// Controle os argumentos `resolve` deixando Array#slice converter o booleano `noValue` para inteiro:
			// * falso: [valor].slice( 0 ) => resolver( valor )
			// * verdadeiro: [valor].slice( 1 ) => resolver()
			resolve.apply(indefinido, [valor].slice(noValue));
		}

	// Para Promessas/A+, converte exceções em rejeições
	// Como jQuery.when não desembrulha os thenables, podemos pular as verificações extras que aparecem em
	// Deferred#then para suprimir condicionalmente a rejeição.
	} capturar (valor) {

		// Suporte: somente Android 4.0
		// Funções de modo estrito invocadas sem .call/.apply obtêm contexto de objeto global
		rejeitar.apply(indefinido, [valor]);
	}
}

jQuery.extend({

	Adiado: function( func ) {
		var tuplas = [

				// ação, adicionar ouvinte, retornos de chamada,
				// ... .then manipuladores, índice de argumento, [estado final]
				["notificar", "progresso", jQuery.Callbacks("memória" ),
					jQuery.Callbacks("memória" ), 2 ],
				["resolver", "concluído", jQuery.Callbacks("memória única" ),
					jQuery.Callbacks("memória única"), 0, "resolvido"],
				["rejeitar", "falha", jQuery.Callbacks("memória única"),
					jQuery.Callbacks("memória única"), 1, "rejeitado"]
			],
			estado = "pendente",
			promessa = {
				função estatal() {
					estado de retorno;
				},
				sempre: função() {
					adiado.done(argumentos).fail(argumentos);
					devolva isso;
				},
				"catch": function(fn) {
					retornar promessa.então(nulo,fn);
				},

				//Mantém o pipe para retrocompatibilidade
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = argumentos;

					retornar jQuery.Deferred(função(newDefer) {
						jQuery.each(tuplas, função(_i, tupla) {

							// Mapeia tuplas (progresso, concluído, falha) para argumentos (concluído, falha, progresso)
							var fn = isFunction( fns[ tupla[ 4 ] ] ) && fns[ tupla[ 4 ] ];

							// deferred.progress(function() { vincular a newDefer ou newDefer.notify })
							// deferred.done(function() { vincular a newDefer ou newDefer.resolve })
							// deferred.fail(function() { vincular a newDefer ou newDefer.reject })
							adiado[ tupla[ 1 ] ]( function() {
								var retornado = fn && fn.apply(isto, argumentos);
								if (retornado && isFunction(retornado.promise)) {
									retornado.promise()
										.progress(newDefer.notify)
										.feito (newDefer.resolve)
										.fail(newDefer.reject);
								} outro {
									newDefer[ tupla[ 0 ] + "Com" ](
										esse,
										certo? [retornado]: argumentos
									);
								}
							} );
						} );
						fns = nulo;
					} ).promessa();
				},
				então: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve(profundidade, adiado, manipulador, especial) {
						função de retorno() {
							var isso = isso,
								args = argumentos,
								podeThrow = function() {
									var retornado, então;

									// Suporte: Promessas/A+ seção 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignora tentativas de resolução dupla
									if (profundidade <profundidade máxima) {
										retornar;
									}

									retornado = handler.apply(isso, args);

									// Suporte: Promessas/A+ seção 2.3.1
									// https://promisesaplus.com/#point-48
									if (retornado === adiado.promise()) {
										throw new TypeError("Auto-resolução então habilitável");
									}

									// Suporte: Promessas/A+ seções 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Recupera `then` apenas uma vez
									então = retornou &&

										// Suporte: Promessas/A+ seção 2.3.4
										// https://promisesaplus.com/#point-64
										// Verifica apenas a capacidade de objetos e funções
										( typeof retornado === "objeto" ||
											typeof retornado === "função" ) &&
										retornou.então;

									// Lida com um thenable retornado
									if (éFunção(então)) {

										// Processadores especiais (notificar) apenas aguardar resolução
										if (especial) {
											Em seguida, ligue(
												devolvida,
												resolver(maxDepth, adiado, Identidade, especial),
												resolver(maxDepth, adiado, Thrower, especial)
											);

										// Processadores normais (resolver) também se conectam ao progresso
										} outro {

											// ...e desconsiderar valores de resolução mais antigos
											profundidade máxima++;

											Em seguida, ligue(
												devolvida,
												resolver(maxDepth, adiado, Identidade, especial),
												resolver(maxDepth, adiado, Thrower, especial),
												resolver(maxDepth, adiado, Identidade,
													deferred.notifyWith )
											);
										}

									// Lida com todos os outros valores retornados
									} outro {

										// Somente manipuladores substitutos passam no contexto
										// e vários valores (comportamento não especificado)
										if (manipulador! == Identidade) {
											isso = indefinido;
											args = [retornado];
										}

										// Processa o(s) valor(es)
										// O processo padrão é resolver
										( especial || deferido.resolveWith )( isso, args );
									}
								},

								// Somente processadores normais (resolvem) capturam e rejeitam exceções
								processo = especial?
									pode lançar:
									função() {
										tentar {
											podeArremessar();
										} pegar (e) {

											if (jQuery.Deferred.exceptionHook) {
												jQuery.Deferred.exceptionHook(e,
													processo.erro);
											}

											// Suporte: Promessas/A+ seção 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignora exceções pós-resolução
											if (profundidade + 1 >= maxDepth) {

												// Somente manipuladores substitutos passam no contexto
												// e vários valores (comportamento não especificado)
												if (manipulador! == Lançador) {
													isso = indefinido;
													argumentos = [e];
												}

												adiado.rejectWith(isso, args);
											}
										}
									};

							// Suporte: Promessas/A+ seção 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							//Resolver promessas imediatamente para evitar falsa rejeição de
							//erros subsequentes
							se (profundidade) {
								processo();
							} outro {

								//Chama um hook opcional para registrar o erro, em caso de exceção
								// já que de outra forma ele será perdido quando a execução for assíncrona
								if (jQuery.Deferred.getErrorHook) {
									process.error = jQuery.Deferred.getErrorHook();

								// O alias obsoleto acima. Embora o nome sugira
								// retornando a pilha, não uma instância de erro, jQuery apenas passa
								// diretamente para `console.warn` para que ambos funcionem; uma instância
								// apenas coopera melhor com mapas de origem.
								} else if (jQuery.Deferred.getStackHook) {
									process.error = jQuery.Deferred.getStackHook();
								}
								window.setTimeout(processo);
							}
						};
					}

					retornar jQuery.Deferred(função(newDefer) {

						//progress_handlers.add(...)
						tuplas[ 0 ][ 3 ].add(
							resolver(
								0,
								novoAdiar,
								isFunction(onProgress)?
									em progresso :
									Identidade,
								novoDefer.notifyWith
							)
						);

						// cumpridos_handlers.add(...)
						tuplas[ 1 ][ 3 ].add(
							resolver(
								0,
								novoAdiar,
								isFunction(onFulfilled)?
									onFulfilled:
									Identidade
							)
						);

						//rejeitado_handlers.add(...)
						tuplas[ 2 ][ 3 ].add(
							resolver(
								0,
								novoAdiar,
								isFunction(onRejected)?
									onRejeitado:
									Atirador
							)
						);
					} ).promessa();
				},

				// Obtenha uma promessa para este adiamento
				// Se obj for fornecido, o aspecto da promessa será adicionado ao objeto
				promessa: function( obj ) {
					retornar obj! = nulo? jQuery.extend (obj, promessa): promessa;
				}
			},
			adiado = {};

		//Adiciona métodos específicos da lista
		jQuery.each(tuplas, função(i, tupla) {
			var lista = tupla[2],
				stateString = tupla[ 5 ];

			//promessa.progress=list.add
			//promessa.done=lista.add
			// promessa.fail = lista.add
			promessa[ tupla[ 1 ] ] = lista.add;

			// Lida com estado
			if (estadoString) {
				lista.add(
					função() {

						// estado = "resolvido" (ou seja, cumprido)
						// estado = "rejeitado"
						estado = estadoString;
					},

					//rejeitado_callbacks.disable
					//full_callbacks.disable
					tuplas[3 - i][2].desabilitar,

					//rejeitado_handlers.disable
					// cumpridos_handlers.disable
					tuplas[ 3 - i ][ 3 ].disable,

					//progress_callbacks.lock
					tuplas[ 0 ][ 2 ].lock,

					//progress_handlers.lock
					tuplas[ 0 ][ 3 ].lock
				);
			}

			//progress_handlers.fire
			// cumprido_handlers.fire
			//rejeitado_handlers.fire
			list.add( tupla[3].fogo);

			// deferido.notify = function() { deferido.notifyWith(...) }
			// deferido.resolve = function() { deferido.resolveWith(...) }
			// adiado.reject = function() { adiado.rejectWith(...) }
			adiado[ tupla[ 0 ] ] = function() {
				adiado[ tupla[ 0 ] + "Com" ]( this === adiado ? indefinido : this, argumentos );
				devolva isso;
			};

			// adiado.notifyWith = list.fireWith
			// adiado.resolveWith = list.fireWith
			// adiado.rejectWith = list.fireWith
			adiado[ tupla[ 0 ] + "Com" ] = list.fireWith;
		} );

		// Faça do adiado uma promessa
		promessa.promessa(adiado);

		// Chama a função dada se houver
		se (função) {
			func.call(diferido, diferido);
		}

		// Tudo feito!
		retorno diferido;
	},

	//Ajudante adiado
	quando: function(singleValue) {
		var

			//contagem de subordinados incompletos
			restante = argumentos.comprimento,

			//contagem de argumentos não processados
			eu = restante,

			// dados de atendimento subordinados
			resolveContexts = Array(i),
			resolveValues ​​= slice.call(argumentos),

			// o principal adiado
			primário = jQuery.Deferred(),

			//fábrica de retorno de chamada subordinada
			updateFunc = função (i) {
				função de retorno (valor) {
					resolveContexts[i] = isto;
					resolveValues[i] = argumentos.length > 1? slice.call (argumentos): valor;
					if ( !( --remaining ) ) {
						primário.resolveWith(resolvContexts, resolveValues);
					}
				};
			};

		// Argumentos simples e vazios são adotados como Promise.resolve
		if ( restante <= 1 ) {
			adotarValue(singleValue, primário.done(updateFunc(i)).resolver, primário.rejeitar,
				!restante );

			// Use .then() para desembrulhar thenables secundários (cf. gh-3000)
			if (primário.estado() === "pendente" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				retornar primário.então();
			}
		}

		// Vários argumentos são agregados como elementos do array Promise.all
		enquanto eu-- ) {
			adoptValue(resolveValues[i], updateFunc(i),primário.rejeitar);
		}

		retornar primário.promise();
	}
} );


// Geralmente indicam um erro do programador durante o desenvolvimento,
// avisar sobre eles o mais rápido possível, em vez de engoli-los por padrão.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

// Se `jQuery.Deferred.getErrorHook` for definido, `asyncError` é um erro
// capturado antes da barreira assíncrona para obter a causa do erro original
// que de outra forma pode estar oculto.
jQuery.Deferred.exceptionHook = função (erro, asyncError) {

	// Suporte: somente IE 8 - 9
	// O console existe quando as ferramentas de desenvolvimento estão abertas, o que pode acontecer a qualquer momento
	if (window.console && window.console.warn && error && rerrorNames.test(error.name)) {
		window.console.warn ("exceção jQuery.Deferred:" + error.message,
			erro.stack, asyncError);
	}
};




jQuery.readyException = função (erro) {
	janela.setTimeout(função() {
		erro de lançamento;
	} );
};




// O adiado usado no DOM pronto
var readyList = jQuery.Deferred();

jQuery.fn.ready=função(fn){

	lista pronta
		.então (fn)

		// Envolve jQuery.readyException em uma função para que a pesquisa
		// acontece no momento do tratamento do erro em vez do retorno de chamada
		// cadastro.
		.catch(função(erro){
			jQuery.readyException(erro);
		} );

	devolva isso;
};

jQuery.extend({

	// O DOM está pronto para ser usado? Defina como verdadeiro assim que ocorrer.
	isReady: falso,

	// Um ​​contador para rastrear quantos itens esperar antes
	// o evento pronto é acionado. Veja trac-6781
	prontoAguarde: 1,

	// Trata quando o DOM está pronto
	pronto: function(espera) {

		// Aborta se houver retenções pendentes ou já estivermos prontos
		if (espera === verdadeiro? --jQuery.readyWait: jQuery.isReady) {
			retornar;
		}

		//Lembre-se que o DOM está pronto
		jQuery.isReady = verdadeiro;

		// Se um evento DOM Ready normal for acionado, diminua e espere se necessário
		if (esperar! == verdadeiro && --jQuery.readyWait > 0) {
			retornar;
		}

		// Se houver funções vinculadas, para executar
		readyList.resolveWith(documento, [jQuery]);
	}
} );

jQuery.ready.then = readyList.then;

// O manipulador de eventos pronto e o método de autolimpeza
função concluída() {
	document.removeEventListener("DOMContentLoaded", concluído);
	window.removeEventListener("carregar", concluído);
	jQuery.ready();
}

// Captura casos onde $(document).ready() é chamado
// após o evento do navegador já ter ocorrido.
// Suporte: IE <=9 - 10 apenas
// O IE mais antigo às vezes sinaliza "interativo" muito cedo
if (document.readyState === "completo" ||
	( document.readyState !== "carregando" && !document.documentElement.doScroll ) ) {

	// Manipule-o de forma assíncrona para permitir que os scripts tenham a oportunidade de atrasar a prontidão
	window.setTimeout(jQuery.ready);

} outro {

	// Use o útil retorno de chamada do evento
	document.addEventListener("DOMContentLoaded", concluído);

	// Um ​​substituto para window.onload, que sempre funcionará
	window.addEventListener("carregar", concluído);
}




//Método multifuncional para obter e definir valores de uma coleção
// O(s) valor(es) pode(m) ser executado(s) opcionalmente se for uma função
var access = function(elems, fn, key, value, chainable, emptyGet, raw) {
	var eu = 0,
		len = elementos.comprimento,
		volume = chave == nulo;

	// Define muitos valores
	if (toType(chave) === "objeto") {
		encadeado = verdadeiro;
		para (i na chave) {
			access(elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Define um valor
	} else if (valor! == indefinido) {
		encadeado = verdadeiro;

		if (!isFunction(valor)) {
			bruto = verdadeiro;
		}

		if (volume) {

			// Operações em massa são executadas em todo o conjunto
			if (bruto) {
				fn.call(elementos, valor);
				fn = nulo;

			// ...exceto ao executar valores de função
			} outro {
				volume = fn;
				fn = função(elem, _chave, valor) {
					retornar bulk.call(jQuery(elem), valor);
				};
			}
		}

		se (fn) {
			for ( ; i < len; i++ ) {
				fn(
					elementos[i], chave, bruto?
						valor :
						valor.call(elems[i], i, fn(elems[i], chave))
				);
			}
		}
	}

	if (encadeado) {
		retornar elementos;
	}

	// Obtém
	if (volume) {
		retornar fn.call(elementos);
	}

	retornar len? fn(elems[0], chave): vazioGet;
};


// Corresponde à string tracejada para camelização
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([az])/g;

// Usado por camelCase como retorno de chamada para substituir()
function fcamelCase( _all, letra ) {
	return letra.toUpperCase();
}

// Converte tracejado para camelCase; usado pelos módulos CSS e dados
// Suporte: IE <=9 - 11, Edge 12 - 15
// A Microsoft esqueceu de fornecer o prefixo do fornecedor (trac-9572)
função camelCase(string) {
	return string.replace(rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var aceitarData = function(proprietário) {

	//Aceita apenas:
	// - Nó
	// - Node.ELEMENT_NODE
	// - Node.DOCUMENT_NODE
	// - Objeto
	// - Qualquer
	retornar proprietário.nodeType === 1 || proprietário.nodeType === 9 || !( +proprietário.nodeType );
};




função Dados() {
	this.expando = jQuery.expando + Data.uid++;
}

Dados.uid = 1;

Dados.protótipo = {

	cache: função(proprietário) {

		// Verifica se o objeto proprietário já possui cache
		var valor = proprietário[ this.expando ];

		//Se não, crie um
		se (! valor) {
			valor = {};

			// Podemos aceitar dados para nós não-elementares em navegadores modernos,
			// mas não deveríamos, veja trac-8335.
			// Sempre retorna um objeto vazio.
			if (aceitarDados(proprietário)) {

				// Se for um nó improvável de ser stringificado ou em loop
				// usa atribuição simples
				if (proprietário.nodeType) {
					proprietário[ this.expando ] = valor;

				// Caso contrário, proteja-o em uma propriedade não enumerável
				// configurável deve ser verdadeiro para permitir que a propriedade seja
				// excluído quando os dados são removidos
				} outro {
					Object.defineProperty(proprietário, this.expando, {
						valor: valor,
						configurável: verdadeiro
					} );
				}
			}
		}

		valor de retorno;
	},
	set: function(proprietário, dados, valor) {
		suporte var,
			cache = this.cache(proprietário);

		// Handle: [proprietário, chave, valor] args
		// Sempre use a chave camelCase (gh-2257)
		if (tipo de dados === "string" ) {
			cache[camelCase(dados)] = valor;

		// Identificador: [proprietário, {propriedades}] args
		} outro {

			// Copie as propriedades uma por uma para o objeto de cache
			for (prop em dados) {
				cache[ camelCase( prop ) ] = dados[ prop ];
			}
		}
		cache de retorno;
	},
	get: function(proprietário, chave) {
		chave de retorno === indefinido?
			this.cache (proprietário):

			// Sempre use a chave camelCase (gh-2257)
			proprietário[ this.expando ] && proprietário[ this.expando ][ camelCase ( key ) ];
	},
	acesso: function(proprietário, chave, valor) {

		// Nos casos em que:
		//
		// 1. Nenhuma chave foi especificada
		// 2. Uma chave de string foi especificada, mas nenhum valor foi fornecido
		//
		// Pegue o caminho "read" e permita que o método get determine
		// qual valor retornar, respectivamente:
		//
		// 1. Todo o objeto de cache
		// 2. Os dados armazenados na chave
		//
		if (chave === indefinido ||
				((chave && tipo de chave === "string" ) && valor === indefinido ) ) {

			retorne this.get (proprietário, chave);
		}

		// Quando a chave não é uma string ou é uma chave e um valor
		// são especificados, definidos ou estendidos (objetos existentes) com:
		//
		// 1. Um objeto de propriedades
		// 2. Uma chave e um valor
		//
		this.set(proprietário, chave, valor);

		// Como o caminho "set" pode ter dois pontos de entrada possíveis
		// retorna os dados esperados com base no caminho percorrido[*]
		valor de retorno! == indefinido? valor: chave;
	},
	remover: function(proprietário, chave) {
		var eu,
			cache = proprietário[ this.expando ];

		if (cache === indefinido) {
			retornar;
		}

		if (chave! == indefinido) {

			//Suporta array ou string de chaves separadas por espaço
			if (Array.isArray(chave)) {

				// Se key for um array de chaves...
				// Sempre configuramos chaves camelCase, então remova-as.
				chave = chave.map(camelCase);
			} outro {
				chave = camelCase(chave);

				// Se existir uma chave com espaços, use-a.
				// Caso contrário, crie um array combinando espaços não em branco
				chave = chave no cache?
					[ chave ] :
					(key.match(rnothtmlwhite) || []);
			}

			i = chave.comprimento;

			enquanto eu-- ) {
				excluir cache[chave[i]];
			}
		}

		//Remove o expando se não houver mais dados
		if (chave === indefinido || jQuery.isEmptyObject(cache)) {

			// Suporte: Cromo <=35 - 45
			// O desempenho do Webkit e do Blink é prejudicado ao excluir propriedades
			// dos nós DOM, então defina como indefinido
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restrito)
			if (proprietário.nodeType) {
				proprietário[ this.expando ] = indefinido;
			} outro {
				deletar proprietário[ this.expando ];
			}
		}
	},
	hasData: função(proprietário) {
		var cache = proprietário[ this.expando ];
		retornar cache! == indefinido &&! jQuery.isEmptyObject (cache);
	}
};
var dadosPriv = novos dados();

var dataUser = new Data();



// Resumo da implementação
//
// 1. Aplicar superfície de API e compatibilidade semântica com branch 1.9.x
// 2. Melhore a capacidade de manutenção do módulo reduzindo o armazenamento
// caminhos para um único mecanismo.
// 3. Use o mesmo mecanismo único para suportar dados "privados" e "usuários".
// 4. _Nunca_ exponha dados "privados" ao código do usuário (TODO: Drop _data, _removeData)
// 5. Evite expor detalhes de implementação em objetos de usuário (por exemplo, propriedades expando)
// 6. Fornecer um caminho claro para a atualização da implementação do WeakMap em 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[AZ]/g;

function getDados(dados) {
	if (dados === "verdadeiro" ) {
		retornar verdadeiro;
	}

	if (dados === "falso" ) {
		retorna falso;
	}

	if (dados === "nulo" ) {
		retornar nulo;
	}

	// Somente converte para um número se não alterar a string
	if (dados === +dados + "") {
		retornar +dados;
	}

	if (rbrace.test(dados)) {
		retornar JSON.parse(dados);
	}

	retornar dados;
}

function dataAttr(elem, chave, dados) {
	var nome;

	// Se nada foi encontrado internamente, tente buscar qualquer
	// dados do atributo data-* do HTML5
	if (dados === indefinido && elem.nodeType === 1) {
		nome = "dados-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		dados = elem.getAttribute(nome);

		if (tipo de dados === "string" ) {
			tentar {
				dados = getDados(dados);
			} pegar (e) {}

			// Certifique-se de definir os dados para que não sejam alterados posteriormente
			dataUser.set(elem,chave,dados);
		} outro {
			dados = indefinido;
		}
	}
	retornar dados;
}

jQuery.extend({
	hasData: função (elem) {
		retornar dataUser.hasData(elem) || dataPriv.hasData(elem);
	},

	dados: função (elem, nome, dados) {
		return dataUser.access(elem, nome, dados);
	},

	removeData: function(elem, nome) {
		dataUser.remove(elem, nome);
	},

	// TODO: Agora que todas as chamadas para _data e _removeData foram substituídas
	// com chamadas diretas aos métodos dataPriv, estes podem ser descontinuados.
	_dados: função(elem, nome, dados) {
		return dataPriv.access(elem, nome, dados);
	},

	_removeData: function(elem, nome) {
		dataPriv.remove(elem, nome);
	}
} );

jQuery.fn.extend({
	dados: função(chave, valor) {
		var i, nome, dados,
			elemento = este[0],
			atributos = elem && elem.atributos;

		// Obtém todos os valores
		if (chave === indefinido) {
			if (este.comprimento) {
				dados = dataUser.get(elem);

				if (elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = atributos.comprimento;
					enquanto eu-- ) {

						// Suporte: somente IE 11
						// Os elementos attrs podem ser nulos (trac-14894)
						if (atributos[i]) {
							nome = attrs[i].nome;
							if (nome.indexOf("dados-" ) === 0 ) {
								nome = camelCase(nome.slice(5));
								dataAttr(elem, nome, dados[nome]);
							}
						}
					}
					dataPriv.set(elem, "hasDataAttrs", true);
				}
			}

			retornar dados;
		}

		// Define vários valores
		if (tipo de chave === "objeto") {
			retorne isto.cada(função() {
				dataUser.set(isto,chave);
			} );
		}

		retornar acesso(isto, função(valor) {
			var dados;

			// O objeto jQuery de chamada (correspondência do elemento) não está vazio
			// (e portanto tem um elemento aparece neste[ 0 ]) e o
			// O parâmetro `value` não foi indefinido. Um objeto jQuery vazio
			// resultará em `indefinido` para elem = this[ 0 ] que irá
			// lança uma exceção se for feita uma tentativa de ler um cache de dados.
			if (elem && valor === indefinido) {

				//Tenta obter dados do cache
				// A chave sempre será camelCased em Data
				dados = dataUser.get(elem, chave);
				if (dados! == indefinido) {
					retornar dados;
				}

				//Tenta "descobrir" os dados em
				// dados personalizados HTML5-* atributos
				dados = dadosAttr(elem, chave);
				if (dados! == indefinido) {
					retornar dados;
				}

				// Tentamos muito, mas os dados não existem.
				retornar;
			}

			//Definir os dados...
			this.each(função() {

				// Sempre armazenamos a chave camelCased
				dataUser.set(este, chave, valor);
			} );
		}, null, valor, argumentos.length > 1, null, true );
	},

	removerDados: function(chave) {
		retorne isto.cada(função() {
			dataUser.remove (isto, chave);
		} );
	}
} );


jQuery.extend({
	fila: function(elem, tipo, dados) {
		var fila;

		se (elemento) {
			tipo = ( tipo || "fx" ) + "fila";
			fila = dataPriv.get(elem, tipo);

			// Acelere o desenfileiramento saindo rapidamente se for apenas uma pesquisa
			se (dados) {
				if (!fila || Array.isArray(dados)) {
					fila = dataPriv.access(elem, tipo, jQuery.makeArray(data));
				} outro {
					fila.push(dados);
				}
			}
			fila de retorno || [];
		}
	},

	desenfileirar: function(elem, type) {
		tipo = tipo || "fx";

		var fila = jQuery.queue(elem, tipo),
			startLength = fila.comprimento,
			fn = fila.shift(),
			ganchos = jQuery._queueHooks(elem, tipo),
			próximo = função() {
				jQuery.dequeue(elem, tipo);
			};

		// Se a fila fx for retirada da fila, sempre remova o sentinela de progresso
		if (fn === "em andamento" ) {
			fn = fila.shift();
			startLength--;
		}

		se (fn) {

			// Adiciona uma sentinela de progresso para evitar que a fila fx seja
			//retirado automaticamente da fila
			if (tipo === "fx" ) {
				fila.unshift("em andamento");
			}

			//Limpa a última função de parada da fila
			excluir ganchos.stop;
			fn.call(elem, próximo, ganchos);
		}

		if ( !startLength && ganchos ) {
			ganchos.empty.fire();
		}
	},

	// Não público - gera um objeto queueHooks ou retorna o atual
	_queueHooks: function(elem, tipo) {
		var chave = tipo + "queueHooks";
		retornar dataPriv.get(elem, chave) || dataPriv.access(elem, chave, {
			vazio: jQuery.Callbacks("memória única").add( function() {
				dataPriv.remove(elem, [tipo + "fila", chave]);
			} )
		} );
	}
} );

jQuery.fn.extend({
	fila: function( tipo, dados ) {
		var setter = 2;

		if (tipo de tipo!== "string") {
			dados = tipo;
			tipo = "fx";
			normatizador--;
		}

		if (argumentos.comprimento <setter) {
			retornar jQuery.queue(este[0], tipo);
		}

		retornar dados === indefinido?
			esse :
			this.each(função() {
				var fila = jQuery.queue(este, tipo, dados);

				//Garante um gancho para esta fila
				jQuery._queueHooks(isto, tipo);

				if (type === "fx" && fila[ 0 ] !== "inprogress" ) {
					jQuery.dequeue(este, tipo);
				}
			} );
	},
	desenfileirar: function( tipo ) {
		retorne isto.cada(função() {
			jQuery.dequeue(este, tipo);
		} );
	},
	clearQueue: função (tipo) {
		retornar this.queue(tipo || "fx", [] );
	},

	//Resolve uma promessa quando filas de um determinado tipo
	// são esvaziados (fx é o tipo por padrão)
	promessa: function( tipo, obj ) {
		vartmp,
			contagem = 1,
			adiar = jQuery.Deferred(),
			elementos = isto,
			i = este.comprimento,
			resolver = função() {
				if ( !( --count ) ) {
					defer.resolveWith(elementos, [elementos]);
				}
			};

		if (tipo de tipo!== "string") {
			obj = tipo;
			tipo = indefinido;
		}
		tipo = tipo || "fx";

		enquanto eu-- ) {
			tmp = dataPriv.get(elementos[i], tipo + "queueHooks");
			if (tmp && tmp.empty) {
				contar++;
				tmp.empty.add(resolver);
			}
		}
		resolver();
		retornar defer.promise(obj);
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([az%]*)$", "i" );


var cssExpand = ["Topo", "Direita", "Inferior", "Esquerda"];

var documentElement = document.documentElement;



	var isAttached = function(elem) {
			retornar jQuery.contains(elem.ownerDocument, elem);
		},
		composto = { composto: verdadeiro };

	// Suporte: IE 9 - 11+, Edge 12 - 18+, iOS 10.0 - 10.2 apenas
	// Verifica o anexo através dos limites do shadow DOM quando possível (gh-3504)
	// Suporte: somente iOS 10.0-10.2
	// As primeiras versões do iOS 10 suportam `attachShadow`, mas não `getRootNode`,
	// levando a erros. Precisamos verificar `getRootNode`.
	if (documentElement.getRootNode) {
		isAttached = function(elem) {
			retornar jQuery.contains(elem.ownerDocument, elem) ||
				elem.getRootNode(composto) === elem.ownerDocument;
		};
	}
var isHiddenWithinTree = function(elem, el) {

		// isHiddenWithinTree pode ser chamado a partir da função jQuery#filter;
		// nesse caso, o elemento será o segundo argumento
		elemento = el || elemento;

		// O estilo inline supera tudo
		retornar elem.style.display === "nenhum" ||
			elem.style.display === "" &&

			// Caso contrário, verifique o estilo computado
			// Suporte: Firefox <=43 - 45
			// Elementos desconectados podem ter display computado: nenhum, então primeiro confirme se elem é
			// no documento.
			isAnexado(elem) &&

			jQuery.css(elem, "display" ) === "nenhum";
	};



function ajustarCSS(elem, prop, valueParts, tween) {
	var ajustado, escala,
		maxIterações = 20,
		valoratual = interpolação?
			função() {
				retornar tween.cur();
			}:
			função() {
				retornar jQuery.css(elem, prop, "");
			},
		inicial = valoratual(),
		unidade = partesdevalor && partesde valor[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// O cálculo do valor inicial é necessário para possíveis incompatibilidades de unidades
		inicialInUnit = elem.nodeType &&
			( jQuery.cssNumber[ prop ] || unidade !== "px" && +initial ) &&
			rcssNum.exec(jQuery.css(elem, prop));

	if (inicialInUnit && inicialInUnit[ 3 ] !== unidade ) {

		// Suporte: Firefox <=54
		// Reduza pela metade o valor alvo da iteração para evitar interferência dos limites superiores do CSS (gh-2144)
		inicial = inicial / 2;

		//Unidades de confiança relatadas por jQuery.css
		unidade = unidade || inicialInUnit[3];

		// Aproxima-se iterativamente de um ponto inicial diferente de zero
		inicialInUnit = +inicial || 1;

		while (maxIterações--) {

			// Avaliar e atualizar nosso melhor palpite (duplicando os palpites que zeram).
			// Termina se a escala for igual ou ultrapassar 1 (tornando o produto antigo*novo não positivo).
			jQuery.style(elem, prop, inicialInUnit + unidade);
			if ((1 - escala) * (1 - (escala = valoratual() / inicial || 0,5)) <= 0) {
				maxIterações = 0;
			}
			inicialInUnit = inicialInUnit/escala;

		}

		inicialInUnit = inicialInUnit * 2;
		jQuery.style(elem, prop, inicialInUnit + unidade);

		// Certifique-se de atualizar as propriedades de interpolação mais tarde
		valorPartes = valorPartes || [];
	}

	if (valorPartes) {
		inicialInUnit = +initialInUnit || +inicial || 0;

		//Aplica deslocamento relativo (+=/-=) se especificado
		ajustado = valorPartes[ 1 ] ?
			inicialInUnit + (valorParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valorPartes[ 2 ];
		if (entre) {
			interpolação.unit = unidade;
			interpolação.start = inicialInUnit;
			interpolação.fim = ajustado;
		}
	}
	retorno ajustado;
}


var defaultDisplayMap = {};

função getDefaultDisplay(elem) {
	var temperatura,
		doc = elem.ownerDocument,
		nodeName = elemento.nodeName,
		display = defaultDisplayMap[NomeNode];

	se (exibir) {
		exibição de retorno;
	}

	temp = doc.body.appendChild(doc.createElement(nodeName));
	exibição = jQuery.css(temp, "exibição");

	temp.parentNode.removeChild(temp);

	if (exibição === "nenhum" ) {
		exibir = "bloquear";
	}
	defaultDisplayMap[NomeNode] = display;

	exibição de retorno;
}

function mostrarOcultar(elementos, mostrar) {
	var exibição, elemento,
		valores = [],
		índice = 0,
		comprimento = elementos.comprimento;

	// Determina o novo valor de exibição para os elementos que precisam ser alterados
	for ( ; índice < comprimento; índice++ ) {
		elemento = elementos[índice];
		se (!elem.style) {
			continuar;
		}

		display=elem.style.display;
		se (mostrar) {

			// Como forçamos a visibilidade dos elementos ocultos em cascata, uma ação imediata (e lenta)
			// a verificação é necessária neste primeiro loop, a menos que tenhamos um valor de exibição não vazio (seja
			// inline ou prestes a ser restaurado)
			if (exibição === "nenhum" ) {
				valores[índice] = dataPriv.get(elem, "display" ) || nulo;
				if (!valores[índice]) {
					elem.style.display = "";
				}
			}
			if (elem.style.display === "" && isHiddenWithinTree(elem)) {
				valores[índice] = getDefaultDisplay(elem);
			}
		} outro {
			if (exibir! == "nenhum") {
				valores[índice] = "nenhum";

				//Lembre-se do que estamos sobrescrevendo
				dataPriv.set(elem, "exibir", exibir);
			}
		}
	}

	// Define a exibição dos elementos em um segundo loop para evitar refluxo constante
	for (índice = 0; índice <comprimento; índice++) {
		if (valores[índice]! = nulo) {
			elementos[índice].style.display = valores[índice];
		}
	}

	elementos de retorno;
}

jQuery.fn.extend({
	mostrar: função() {
		return showHide(isto, verdadeiro);
	},
	ocultar: function() {
		return mostrarOcultar(este);
	},
	alternar: função (estado) {
		if (tipo de estado === "boolean" ) {
			estado de retorno? this.show(): this.hide();
		}

		retorne isto.cada(função() {
			if (isHiddenWithinTree(este)) {
				jQuery(este).show();
			} outro {
				jQuery(este).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([az][^\/\0>\x20\t\r\n\f]*)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



(função() {
	var fragmento = document.createDocumentFragment(),
		div = fragment.appendChild(document.createElement( "div" ) ),
		entrada = document.createElement("entrada");

	// Suporte: somente Android 4.0 - 4.3
	// Verifica o estado perdido se o nome estiver definido (trac-11217)
	// Suporte: Aplicativos Web do Windows (WWA)
	// `name` e `type` devem usar .setAttribute para WWA (trac-14901)
	input.setAttribute("tipo", "rádio");
	input.setAttribute("verificado", "verificado");
	input.setAttribute("nome", "t");

	div.appendChild(entrada);

	// Suporte: Android <=4.1 apenas
	// O WebKit mais antigo não clona o estado verificado corretamente em fragmentos
	support.checkClone = div.cloneNode(true).cloneNode(true).lastChild.checked;

	// Suporte: IE <=11 apenas
	// Certifique-se de que a área de texto (e a caixa de seleção) defaultValue esteja clonada corretamente
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;

	// Suporte: IE <=9 apenas
	// IE <=9 substitui as tags <option> pelo seu conteúdo quando inseridas fora do
	// o elemento selecionado.
	div.innerHTML = "<opção></opção>";
	suporte.option = !!div.lastChild;
} )();


//Temos que fechar essas tags para suportar XHTML (trac-13200)
var wrapMap = {

	// Os analisadores XHTML não inserem magicamente elementos no
	// da mesma forma que os analisadores de sopa de tags fazem. Então não podemos encurtar
	// isso omitindo <tbody> ou outros elementos obrigatórios.
	thead: [ 1, "<tabela>", "</tabela>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_padrão: [ 0, "", "" ]
};

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// Suporte: IE <=9 apenas
if (!support.option) {
	wrapMap.optgroup = wrapMap.option = [ 1, "<select multiple='multiple'>", "</select>" ];
}


function getAll(contexto, tag) {

	// Suporte: IE <=9 - 11 apenas
	// Use typeof para evitar invocação de método com argumento zero em objetos host (trac-15151)
	var ret;

	if (typeof context.getElementsByTagName! == "indefinido") {
		ret = context.getElementsByTagName(tag || "*" );

	} else if ( typeof context.querySelectorAll !== "indefinido" ) {
		ret = context.querySelectorAll(tag || "*" );

	} outro {
		ret = [];
	}

	if ( tag === indefinido || tag && nodeName( contexto, tag ) ) {
		return jQuery.merge([contexto], ret);
	}

	retornar ret;
}


// Marca os scripts como já avaliados
function setGlobalEval(elems, refElements) {
	var eu = 0,
		l = elementos.comprimento;

	para ( ; eu < l; i++ ) {
		dataPriv.set(
			elementos[ eu ],
			"globalEval",
			!refElementos || dataPriv.get(refElements[i], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment(elementos, contexto, scripts, seleção, ignorado) {
	var elem, tmp, tag, wrap, anexado, j,
		fragmento = context.createDocumentFragment(),
		nós = [],
		eu = 0,
		l = elementos.comprimento;

	para ( ; eu < l; i++ ) {
		elemento = elementos[i];

		if ( elemento || elemento === 0 ) {

			//Adiciona nós diretamente
			if (toType(elem) === "objeto") {

				// Suporte: somente Android <=4.0, somente PhantomJS 1
				// push.apply(_, arraylike) lança no WebKit antigo
				jQuery.merge (nós, elem.nodeType? [elem]: elem);

			// Converte não-html em um nó de texto
			} else if ( !rhtml.test(elem ) ) {
				nós.push(context.createTextNode(elem));

			// Converte HTML em nós DOM
			} outro {
				tmp = tmp || fragment.appendChild(context.createElement("div"));

				// Desserializa uma representação padrão
				tag = (rtagName.exec(elem) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[1] + jQuery.htmlPrefilter(elem) + wrap[2];

				// Desce através dos wrappers até o conteúdo certo
				j = embrulhar[0];
				enquanto (j--) {
					tmp = tmp.lastChild;
				}

				// Suporte: somente Android <=4.0, somente PhantomJS 1
				// push.apply(_, arraylike) lança no WebKit antigo
				jQuery.merge (nós, tmp.childNodes);

				//Lembre-se do contêiner de nível superior
				tmp = fragmento.firstChild;

				//Garante que os nós criados sejam órfãos (trac-12392)
				tmp.textContent = "";
			}
		}
	}

	//Remove o wrapper do fragmento
	fragmento.textContent = "";

	eu = 0;
	while ( (elem = nós[ i++ ] ) ) {

		// Ignora os elementos que já estão na coleção de contexto (trac-4087)
		if (seleção && jQuery.inArray(elem, seleção) > -1) {
			se (ignorado) {
				ignorado.push(elem);
			}
			continuar;
		}

		anexado = isAttached(elem);

		//Anexar ao fragmento
		tmp = getAll(fragmento.appendChild(elem), "script");

		// Preserva o histórico de avaliação do script
		se (anexado) {
			setGlobalEval(tmp);
		}

		//Captura executáveis
		if (roteiros) {
			j = 0;
			enquanto ( (elem = tmp[ j++ ] ) ) {
				if (rscriptType.test(elem.type || "" ) ) {
					scripts.push(elem);
				}
			}
		}
	}

	fragmento de retorno;
}


var rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

função retornoVerdadeiro() {
	retornar verdadeiro;
}

função retornoFalso() {
	retorna falso;
}

function on(elem, tipos, seletor, dados, fn, um) {
	var origemFn, tipo;

	// Os tipos podem ser um mapa de tipos/manipuladores
	if (tipo de tipos === "objeto" ) {

		// (tipos-Objeto, seletor, dados)
		if (seletor de tipo! == "string" ) {

			// (tipos-Objeto, dados)
			dados = dados || seletor;
			seletor = indefinido;
		}
		for (digite os tipos) {
			on(elem, tipo, seletor, dados, tipos[tipo], um);
		}
		elemento de retorno;
	}

	if (dados == nulo && fn == nulo) {

		// ( tipos, fn )
		fn = seletor;
		dados = seletor = indefinido;
	} senão if (fn == nulo) {
		if (seletor de tipo === "string" ) {

			// (tipos, seletor, fn)
			fn = dados;
			dados = indefinido;
		} outro {

			// (tipos, dados, fn)
			fn = dados;
			dados = seletor;
			seletor = indefinido;
		}
	}
	se (fn === falso) {
		fn = retornoFalso;
	} senão se ( !fn ) {
		elemento de retorno;
	}

	se (um === 1) {
		origemFn = fn;
		fn = função(evento) {

			// Pode usar um conjunto vazio, pois o evento contém a informação
			jQuery().off(evento);
			return origFn.apply(este, argumentos);
		};

		// Use o mesmo guid para que o chamador possa remover usando origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each(função() {
		jQuery.event.add(isto, tipos, fn, dados, seletor);
	} );
}

/*
 * Funções auxiliares para gerenciamento de eventos – não fazem parte da interface pública.
 * Adereços à biblioteca addEvent de Dean Edwards para muitas das ideias.
 */
jQuery.event={

	globais: {},

	adicione: function(elem, tipos, manipulador, dados, seletor) {

		var handleObjIn, eventHandle, tmp,
			eventos, t, handleObj,
			especial, manipuladores, tipo, namespaces, origType,
			elemData = dataPriv.get(elem);

		//Anexar eventos apenas a objetos que aceitam dados
		if (!acceptData(elem)) {
			retornar;
		}

		// O chamador pode passar um objeto de dados personalizados no lugar do manipulador
		if (manipulador.handler) {
			handleObjIn = manipulador;
			manipulador = handleObjIn.handler;
			seletor = handleObjIn.selector;
		}

		//Garante que seletores inválidos gerem exceções no momento da anexação
		// Avalia em relação a documentElement caso elem seja um nó não-elementar (por exemplo, document)
		if (seletor) {
			jQuery.find.matchesSelector(documentElement, seletor);
		}

		// Certifique-se de que o manipulador tenha um ID exclusivo, usado para localizá-lo/removê-lo posteriormente
		if ( !handler.guid ) {
			manipulador.guid = jQuery.guid++;
		}

		// Inicia a estrutura de eventos e o manipulador principal do elemento, se este for o primeiro
		if (!(eventos = elemData.events)) {
			eventos = elemData.events = Object.create(nulo);
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function(e) {

				// Descarta o segundo evento de um jQuery.event.trigger() e
				// quando um evento é chamado após o descarregamento de uma página
				retornar typeof jQuery !== "indefinido" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply(elem, argumentos): indefinido;
			};
		}

		// Lida com vários eventos separados por um espaço
		tipos = ( tipos || "" ).match( rnothtmlwhite ) || [ "" ];
		t = tipos.comprimento;
		enquanto (t--) {
			tmp = rtypenamespace.exec(tipos[t]) || [];
			tipo = origType = tmp[ 1 ];
			namespaces = (tmp[ 2 ] || "" ).split( "." ).sort();

			// *deve* haver um tipo, sem anexar manipuladores somente de namespace
			se ( !tipo ){
				continuar;
			}

			// Se o evento mudar de tipo, use os manipuladores de eventos especiais para o tipo alterado
			especial = jQuery.event.special[tipo] || {};

			// Se o seletor for definido, determine o tipo de API do evento especial, caso contrário, determinado tipo
			type = (seletor? special.delegateType: special.bindType) || tipo;

			//Atualização especial com base no tipo de redefinição recente
			especial = jQuery.event.special[tipo] || {};

			// handleObj é passado para todos os manipuladores de eventos
			handleObj = jQuery.extend({
				tipo: tipo,
				tipo de origem: tipo de origem,
				dados: dados,
				manipulador: manipulador,
				guid: manipulador.guid,
				seletor: seletor,
				needContext: seletor && jQuery.expr.match.needsContext.test (seletor),
				espaço para nome: namespaces.join( "." )
			}, handleObjIn);

			// Inicia a fila do manipulador de eventos se formos os primeiros
			if ( !( manipuladores = eventos[ tipo ] ) ) {
				manipuladores = eventos[ tipo ] = [];
				manipuladores.delegateCount = 0;

				// Use addEventListener apenas se o manipulador de eventos especiais retornar false
				if (! especial.setup ||
					special.setup.call(elem, dados, namespaces, eventHandle) === falso) {

					if (elem.addEventListener) {
						elem.addEventListener(tipo, eventHandle);
					}
				}
			}

			if (especial.add) {
				especial.add.call(elem, handleObj);

				if (!handleObj.handler.guid) {
					handleObj.handler.guid = manipulador.guid;
				}
			}

			// Adiciona à lista de manipuladores do elemento, delegados na frente
			if (seletor) {
				manipuladores.splice( manipuladores.delegateCount++, 0, handleObj );
			} outro {
				manipuladores.push(handleObj);
			}

			// Acompanhe quais eventos já foram usados, para otimização de eventos
			jQuery.event.global[tipo] = verdadeiro;
		}

	},

	// Desanexa um evento ou conjunto de eventos de um elemento
	remover: function(elem, tipos, manipulador, seletor, mappedTypes) {

		var j, origCount, tmp,
			eventos, t, handleObj,
			especial, manipuladores, tipo, namespaces, origType,
			elemData = dataPriv.hasData(elem) && dataPriv.get(elem);

		if (!elemData || !(eventos = elemData.events)) {
			retornar;
		}

		// Uma vez para cada type.namespace em tipos; tipo pode ser omitido
		tipos = ( tipos || "" ).match( rnothtmlwhite ) || [ "" ];
		t = tipos.comprimento;
		enquanto (t--) {
			tmp = rtypenamespace.exec(tipos[t]) || [];
			tipo = origType = tmp[ 1 ];
			namespaces = (tmp[ 2 ] || "" ).split( "." ).sort();

			// Desvincula todos os eventos (neste namespace, se fornecido) para o elemento
			se ( !tipo ){
				for (digite eventos) {
					jQuery.event.remove(elem, tipo + tipos[t], manipulador, seletor, verdadeiro);
				}
				continuar;
			}

			especial = jQuery.event.special[tipo] || {};
			type = (seletor? special.delegateType: special.bindType) || tipo;
			manipuladores = eventos[tipo] || [];
			tmp = tmp[2] &&
				novo RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			//Remove eventos correspondentes
			origCount = j = manipuladores.comprimento;
			enquanto (j--) {
				handleObj = manipuladores[ j ];

				if ( (mappedTypes || origType === handleObj.origType) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !seletor || seletor === handleObj.selector ||
						seletor === "**" && handleObj.selector ) ) {
					manipuladores.splice( j, 1 );

					if (handleObj.selector) {
						handlers.delegateCount--;
					}
					if (especial.remove) {
						special.remove.call(elem, handleObj);
					}
				}
			}

			// Remove o manipulador de eventos genérico se removemos algo e não existem mais manipuladores
			// (evita potencial de recursão infinita durante a remoção de manipuladores de eventos especiais)
			if (origCount &&!handlers.length) {
				if (!special.teardown ||
					special.teardown.call(elem, namespaces, elemData.handle) === falso) {

					jQuery.removeEvent(elem, tipo, elemData.handle);
				}

				excluir eventos[tipo];
			}
		}

		//Remove os dados e o expando se não for mais usado
		if (jQuery.isEmptyObject(eventos)) {
			dataPriv.remove(elem, "lidar com eventos");
		}
	},

	expedição: function(nativeEvent) {

		var i, j, ret, correspondente, handleObj, handlerQueue,
			args = nova matriz (argumentos.comprimento),

			// Cria um jQuery.Event gravável a partir do objeto de evento nativo
			evento = jQuery.event.fix(nativeEvent),

			manipuladores = (
				dataPriv.get(isto, "eventos") || Object.create(nulo)
			)[evento.tipo] || [],
			especial = jQuery.event.special[evento.type] || {};

		// Use o jQuery.Event corrigido em vez do evento nativo (somente leitura)
		args[0] = evento;

		for (i = 1; i <argumentos.comprimento; i++) {
			args[i] = argumentos[i];
		}

		event.delegateTarget = this;

		// Chame o gancho preDispatch para o tipo mapeado e deixe-o escapar se desejar
		if (special.preDispatch && special.preDispatch.call(este, evento) === falso) {
			retornar;
		}

		//Determina manipuladores
		handlerQueue = jQuery.event.handlers.call(este, evento, manipuladores);

		// Execute os delegados primeiro; eles podem querer parar a propagação abaixo de nós
		eu = 0;
		while ( (correspondido = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget=matched.elem;

			j = 0;
			while (( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Se o evento tiver namespace, cada manipulador só será invocado se for
				// especialmente universal ou seus namespaces são um superconjunto dos eventos.
				if (!event.rnamespace || handleObj.namespace === falso ||
					event.rnamespace.test(handleObj.namespace)) {

					event.handleObj = handleObj;
					evento.data = handleObj.data;

					ret = ((jQuery.event.special[handleObj.origType] || {}).handle ||
						handleObj.handler).apply(matched.elem, args);

					if (ret! == indefinido) {
						if ((evento.resultado = ret) === falso) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Chama o gancho postDispatch para o tipo mapeado
		if (especial.postDispatch) {
			special.postDispatch.call(este, evento);
		}

		retornar evento.resultado;
	},

	manipuladores: function(evento, manipuladores) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegaCount = manipuladores.delegateCount,
			cur = evento.target;

		//Encontra manipuladores delegados
		if (delegaçãoContagem &&

			// Suporte: IE <=9
			// Árvores de instância SVG de buraco negro <use> (trac-13180)
			cur.nodeType &&

			// Suporte: Firefox <=42
			// Suprime cliques que violam especificações indicando um botão de ponteiro não primário (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Suporte: somente IE 11
			// ...mas não os "cliques" da tecla de seta nas entradas de rádio, que podem ter `button` -1 (gh-2343)
			!( event.type === "clique" && event.button >= 1 ) ) {

			for ( ; cur !== isto; cur = cur.parentNode || isto ) {

				// Não verifica não-elementos (trac-13208)
				// Não processe cliques em elementos desabilitados (trac-6911, trac-8165, trac-11382, trac-11764)
				if (cur.nodeType === 1 && !( event.type === "clique" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for (i = 0; i < delegaCount; i++) {
						handleObj = manipuladores[i];

						// Não entre em conflito com as propriedades Object.prototype (trac-13203)
						sel = handleObj.selector + " ";

						if (matchedSelectors[sel] === indefinido) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find(sel, this, null, [cur]).length;
						}
						if (correspondentesSeletores[sel]) {
							matchedHandlers.push(handlerObj);
						}
					}
					if (matchedHandlers.length) {
						handlerQueue.push({elem: cur, manipuladores: matchedHandlers });
					}
				}
			}
		}

		// Adiciona os manipuladores restantes (ligados diretamente)
		cur = isto;
		if (delegaçãoCount < manipuladores.length) {
			handlerQueue.push({elem: cur, manipuladores: manipuladores.slice(deleteCount) });
		}

		return handlerQueue;
	},

	addProp: function(nome, gancho) {
		Object.defineProperty(jQuery.Event.prototype, nome, {
			enumerável: verdadeiro,
			configurável: verdadeiro,

			obter: isFunction(gancho)?
				função() {
					if (este.eventooriginal) {
						retornar gancho (this.originalEvent);
					}
				}:
				função() {
					if (este.eventooriginal) {
						retorne este.originalEvent[nome];
					}
				},

			definir: função (valor) {
				Object.defineProperty(este, nome, {
					enumerável: verdadeiro,
					configurável: verdadeiro,
					gravável: verdadeiro,
					valor: valor
				} );
			}
		} );
	},

	correção: function(originalEvent) {
		retornar evento original[jQuery.expando]?
			Evento original:
			novo jQuery.Event(originalEvent);
	},

	especial: {
		carregar: {

			// Evita que eventos image.load acionados borbulhem para window.load
			semBubble: verdadeiro
		},
		clique em: {

			// Utilize evento nativo para garantir o estado correto para entradas verificáveis
			configuração: função(dados) {

				// Para compressibilidade mútua com _default, substitua o acesso `this` por uma var local.
				// `|| data` é um código morto destinado apenas a preservar a variável por meio de minificação.
				var el = isto || dados;

				// Reivindique o primeiro manipulador
				if (rcheckableType.test(el.type) &&
					el.click && nodeName( el, "entrada" ) ) {

					//dataPriv.set(el, "clique", ... )
					alavancagemNative(el, "clique", true);
				}

				// Retorna false para permitir o processamento normal no chamador
				retorna falso;
			},
			gatilho: função (dados) {

				// Para compressibilidade mútua com _default, substitua o acesso `this` por uma var local.
				// `|| data` é um código morto destinado apenas a preservar a variável por meio de minificação.
				var el = isto || dados;

				// Força a configuração antes de acionar um clique
				if (rcheckableType.test(el.type) &&
					el.click && nodeName( el, "entrada" ) ) {

					alavancagemNative(el, "clique");
				}

				// Retorna não falso para permitir a propagação normal do caminho do evento
				retornar verdadeiro;
			},

			// Para consistência entre navegadores, suprima .click() nativo em links
			// Evite também se estivermos atualmente dentro de uma pilha de eventos nativos aproveitada
			_padrão: função(evento) {
				var alvo = evento.target;
				retornar rcheckableType.test(target.type) &&
					target.click && nodeName( alvo, "entrada") &&
					dataPriv.get(target, "clique") ||
					nodeName(alvo, "a");
			}
		},

		antes de descarregar: {
			postDispatch: função(evento) {

				// Suporte: Firefox 20+
				// O Firefox não alerta se o campo returnValue não estiver definido.
				if (evento.resultado! == indefinido && evento.originalEvent) {
					evento.originalEvent.returnValue = evento.resultado;
				}
			}
		}
	}
};

// Garantir a presença de um ouvinte de eventos que lide com eventos acionados manualmente
// eventos sintéticos interrompendo o progresso até serem invocados novamente em resposta a
// Eventos *nativos* que são acionados diretamente, garantindo que as mudanças de estado tenham
// já ocorreu antes de outros ouvintes serem invocados.
função alavancagemNative(el, tipo, isSetup) {

	// `isSetup` ausente indica uma chamada de gatilho, que deve forçar a configuração por meio de jQuery.event.add
	if (!isSetup) {
		if (dataPriv.get(el, tipo) === indefinido) {
			jQuery.event.add(el, tipo, returnTrue);
		}
		retornar;
	}

	// Registra o controlador como um manipulador universal especial para todos os namespaces de eventos
	dataPriv.set(el, tipo, falso);
	jQuery.event.add(el, tipo, {
		espaço para nome: falso,
		manipulador: função(evento) {
			var resultado,
				salvo = dataPriv.get(este, digite);

			if (( event.isTrigger & 1 ) && this[ tipo ] ) {

				// Interrompe o processamento do evento sintético externo .trigger()ed
				if ( !salvo ) {

					// Armazena argumentos para uso ao manipular o evento nativo interno
					// Sempre haverá pelo menos um argumento (um objeto de evento), então este array
					// não será confundido com um objeto de captura restante.
					salvo = slice.call(argumentos);
					dataPriv.set( this, type, saved );

					// Trigger the native event and capture its result
					this[ type ]();
					result = dataPriv.get( this, type );
					dataPriv.set( this, type, false );

					if ( saved !== result ) {

						// Cancel the outer synthetic event
						event.stopImmediatePropagation();
						event.preventDefault();

						return result;
					}

				// If this is an inner synthetic event for an event with a bubbling surrogate
				// (focus or blur), assume that the surrogate already propagated from triggering
				// the native event and prevent that from happening again here.
				// This technically gets the ordering wrong w.r.t. to `.trigger()` (in which the
				// bubbling surrogate propagates *after* the non-bubbling base), but that seems
				// less bad than duplication.
				} else if ( ( jQuery.event.special[ type ] || {} ).delegateType ) {
					event.stopPropagation();
				}

			// If this is a native event triggered above, everything is now in order
			// Fire an inner synthetic event with the original arguments
			} else if ( saved ) {

				// ...and capture the result
				dataPriv.set( this, type, jQuery.event.trigger(
					saved[ 0 ],
					saved.slice( 1 ),
					this
				) );

				// Abort handling of the native event by all jQuery handlers while allowing
				// native handlers on the same element to run. On target, this is achieved
				// by stopping immediate propagation just on the jQuery event. However,
				// the native event is re-wrapped by a jQuery one on each level of the
				// propagation so the only way to stop it for jQuery is to stop it for
				// everyone via native `stopPropagation()`. This is not a problem for
				// focus/blur which don't bubble, but it does also stop click on checkboxes
				// and radios. We accept this limitation.
				event.stopPropagation();
				event.isImmediatePropagationStopped = returnTrue;
			}
		}
	} );
}

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (trac-504, trac-13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	code: true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,
	which: true
}, jQuery.event.addProp );

jQuery.each( { focus: "focusin", blur: "focusout" }, function( type, delegateType ) {

	function focusMappedHandler( nativeEvent ) {
		if ( document.documentMode ) {

			// Support: IE 11+
			// Attach a single focusin/focusout handler on the document while someone wants
			// focus/blur. This is because the former are synchronous in IE while the latter
			// are async. In other browsers, all those handlers are invoked synchronously.

			// `handle` from private data would already wrap the event, but we need
			// to change the `type` here.
			var handle = dataPriv.get( this, "handle" ),
				event = jQuery.event.fix( nativeEvent );
			event.type = nativeEvent.type === "focusin" ? "focus" : "blur";
			event.isSimulated = true;

			// First, handle focusin/focusout
			handle( nativeEvent );

			// ...then, handle focus/blur
			//
			// focus/blur don't bubble while focusin/focusout do; simulate the former by only
			// invoking the handler at the lower level.
			if ( event.target === event.currentTarget ) {

				// The setup part calls `leverageNative`, which, in turn, calls
				// `jQuery.event.add`, so event handle will already have been set
				// by this point.
				handle( event );
			}
		} else {

			// For non-IE browsers, attach a single capturing handler on the document
			// while someone wants focusin/focusout.
			jQuery.event.simulate( delegateType, nativeEvent.target,
				jQuery.event.fix( nativeEvent ) );
		}
	}

	jQuery.event.special[ type ] = {

		// Utilize native event if possible so blur/focus sequence is correct
		setup: function() {

			var attaches;

			// Claim the first handler
			// dataPriv.set( this, "focus", ... )
			// dataPriv.set( this, "blur", ... )
			leverageNative( this, type, true );

			if ( document.documentMode ) {

				// Support: IE 9 - 11+
				// We use the same native handler for focusin & focus (and focusout & blur)
				// so we need to coordinate setup & teardown parts between those events.
				// Use `delegateType` as the key as `type` is already used by `leverageNative`.
				attaches = dataPriv.get( this, delegateType );
				if ( !attaches ) {
					this.addEventListener( delegateType, focusMappedHandler );
				}
				dataPriv.set( this, delegateType, ( attaches || 0 ) + 1 );
			} else {

				// Return false to allow normal processing in the caller
				return false;
			}
		},
		trigger: function() {

			// Force setup before trigger
			leverageNative( this, type );

			// Return non-false to allow normal event-path propagation
			return true;
		},

		teardown: function() {
			var attaches;

			if ( document.documentMode ) {
				attaches = dataPriv.get( this, delegateType ) - 1;
				if ( !attaches ) {
					this.removeEventListener( delegateType, focusMappedHandler );
					dataPriv.remove( this, delegateType );
				} else {
					dataPriv.set( this, delegateType, attaches );
				}
			} else {

				// Return false to indicate standard teardown should be applied
				return false;
			}
		},

		// Suppress native focus or blur if we're currently inside
		// a leveraged native-event stack
		_default: function( event ) {
			return dataPriv.get( event.target, type );
		},

		delegateType: delegateType
	};

	// Support: Firefox <=44
	// Firefox doesn't have focus(in | out) events
	// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
	//
	// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
	// focus(in | out) events fire after focus & blur events,
	// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
	// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
	//
	// Support: IE 9 - 11+
	// To preserve relative focusin/focus & focusout/blur event order guaranteed on the 3.x branch,
	// attach a single handler for both events in IE.
	jQuery.event.special[ delegateType ] = {
		setup: function() {

			// Handle: regular nodes (via `this.ownerDocument`), window
			// (via `this.document`) & document (via `this`).
			var doc = this.ownerDocument || this.document || this,
				dataHolder = document.documentMode ? this : doc,
				attaches = dataPriv.get( dataHolder, delegateType );

			// Support: IE 9 - 11+
			// We use the same native handler for focusin & focus (and focusout & blur)
			// so we need to coordinate setup & teardown parts between those events.
			// Use `delegateType` as the key as `type` is already used by `leverageNative`.
			if ( !attaches ) {
				if ( document.documentMode ) {
					this.addEventListener( delegateType, focusMappedHandler );
				} else {
					doc.addEventListener( type, focusMappedHandler, true );
				}
			}
			dataPriv.set( dataHolder, delegateType, ( attaches || 0 ) + 1 );
		},
		teardown: function() {
			var doc = this.ownerDocument || this.document || this,
				dataHolder = document.documentMode ? this : doc,
				attaches = dataPriv.get( dataHolder, delegateType ) - 1;

			if ( !attaches ) {
				if ( document.documentMode ) {
					this.removeEventListener( delegateType, focusMappedHandler );
				} else {
					doc.removeEventListener( type, focusMappedHandler, true );
				}
				dataPriv.remove( dataHolder, delegateType );
			} else {
				dataPriv.set( dataHolder, delegateType, attaches );
			}
		}
	};
} );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,

	rcleanScript = /^\s*<!\[CDATA\[|\]\]>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.get( src );
		events = pdataOld.events;

		if ( events ) {
			dataPriv.remove( dest, "handle events" );

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = flat( args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (trac-8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Re-enable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl && !node.noModule ) {
								jQuery._evalUrl( node.src, {
									nonce: node.nonce || node.getAttribute( "nonce" )
								}, doc );
							}
						} else {

							// Unwrap a CDATA section containing script contents. This shouldn't be
							// needed as in XML documents they're already not visible when
							// inspecting element contents and in HTML documents they have no
							// meaning but we're preserving that logic for backwards compatibility.
							// This will be removed completely in 4.0. See gh-4904.
							DOMEval( node.textContent.replace( rcleanScript, "" ), node, doc );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && isAttached( node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html;
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = isAttached( elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew jQuery#find here for performance reasons:
			// https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var rcustomProp = /^--/;


var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (trac-15098, trac-14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var swap = function( elem, options, callback ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.call( elem );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};


var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		// Support: Chrome <=64
		// Don't get tricked when zoom affects offsetWidth (gh-4029)
		div.style.position = "absolute";
		scrollboxSizeVal = roundPixelMeasures( div.offsetWidth / 3 ) === 12;

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableTrDimensionsVal, reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (trac-8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		},

		// Support: IE 9 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Behavior in IE 9 is more subtle than in newer versions & it passes
		// some versions of this test; make sure not to make it pass there!
		//
		// Support: Firefox 70+
		// Only Firefox includes border widths
		// in computed dimensions. (gh-4529)
		reliableTrDimensions: function() {
			var table, tr, trChild, trStyle;
			if ( reliableTrDimensionsVal == null ) {
				table = document.createElement( "table" );
				tr = document.createElement( "tr" );
				trChild = document.createElement( "div" );

				table.style.cssText = "position:absolute;left:-11111px;border-collapse:separate";
				tr.style.cssText = "box-sizing:content-box;border:1px solid";

				// Support: Chrome 86+
				// Height set through cssText does not get applied.
				// Computed height then comes back as 0.
				tr.style.height = "1px";
				trChild.style.height = "9px";

				// Support: Android 8 Chrome 86+
				// In our bodyBackground.html iframe,
				// display for all div elements is set to "inline",
				// which causes a problem only in Android 8 Chrome 86.
				// Ensuring the div is `display: block`
				// gets around this issue.
				trChild.style.display = "block";

				documentElement
					.appendChild( table )
					.appendChild( tr )
					.appendChild( trChild );

				trStyle = window.getComputedStyle( tr );
				reliableTrDimensionsVal = ( parseInt( trStyle.height, 10 ) +
					parseInt( trStyle.borderTopWidth, 10 ) +
					parseInt( trStyle.borderBottomWidth, 10 ) ) === tr.offsetHeight;

				documentElement.removeChild( table );
			}
			return reliableTrDimensionsVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,
		isCustomProp = rcustomProp.test( name ),

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, trac-12537)
	//   .css('--customProperty) (gh-3144)
	if ( computed ) {

		// Support: IE <=9 - 11+
		// IE only supports `"float"` in `getPropertyValue`; in computed styles
		// it's only available as `"cssFloat"`. We no longer modify properties
		// sent to `.css()` apart from camelCasing, so we need to check both.
		// Normally, this would create difference in behavior: if
		// `getPropertyValue` returns an empty string, the value returned
		// by `.css()` would be `undefined`. This is usually the case for
		// disconnected elements. However, in IE even disconnected elements
		// with no styles return `"none"` for `getPropertyValue( "float" )`
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( isCustomProp && ret ) {

			// Support: Firefox 105+, Chrome <=105+
			// Spec requires trimming whitespace for custom properties (gh-4926).
			// Firefox only trims leading whitespace. Chrome just collapses
			// both leading & trailing whitespace to a single space.
			//
			// Fall back to `undefined` if empty string returned.
			// This collapses a missing definition with property defined
			// and set to an empty string but there's no standard API
			// allowing us to differentiate them without a performance penalty
			// and returning `undefined` aligns with older jQuery.
			//
			// rtrimCSS treats U+000D CARRIAGE RETURN and U+000C FORM FEED
			// as whitespace while CSS does not, but this is not a problem
			// because CSS preprocessing replaces them with U+000A LINE FEED
			// (which *is* CSS whitespace)
			// https://www.w3.org/TR/css-syntax-3/#input-preprocessing
			ret = ret.replace( rtrimCSS, "$1" ) || undefined;
		}

		if ( ret === "" && !isAttached( elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style,
	vendorProps = {};

// Return a vendor-prefixed property or undefined
function vendorPropName( name ) {

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a potentially-mapped jQuery.cssProps or vendor prefixed property
function finalPropName( name ) {
	var final = jQuery.cssProps[ name ] || vendorProps[ name ];

	if ( final ) {
		return final;
	}
	if ( name in emptyStyle ) {
		return name;
	}
	return vendorProps[ name ] = vendorPropName( name ) || name;
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	};

function setPositiveNumber( _elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0,
		marginDelta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		// Count margin delta separately to only add it after scroll gutter adjustment.
		// This is needed to make negative margins work with `outerHeight( true )` (gh-3982).
		if ( box === "margin" ) {
			marginDelta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5

		// If offsetWidth/offsetHeight is unknown, then we can't determine content-box scroll gutter
		// Use an explicit zero to avoid NaN (gh-3964)
		) ) || 0;
	}

	return delta + marginDelta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),

		// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-4322).
		// Fake content-box until we know it's needed to know the true value.
		boxSizingNeeded = !support.boxSizingReliable() || extra,
		isBorderBox = boxSizingNeeded &&
			jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox,

		val = curCSS( elem, dimension, styles ),
		offsetProp = "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 );

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}


	// Support: IE 9 - 11 only
	// Use offsetWidth/offsetHeight for when box sizing is unreliable.
	// In those cases, the computed value can be trusted to be border-box.
	if ( ( !support.boxSizingReliable() && isBorderBox ||

		// Support: IE 10 - 11+, Edge 15 - 18+
		// IE/Edge misreport `getComputedStyle` of table rows with width/height
		// set in CSS while `offset*` properties report correct values.
		// Interestingly, in some cases IE 9 doesn't suffer from this issue.
		!support.reliableTrDimensions() && nodeName( elem, "tr" ) ||

		// Fall back to offsetWidth/offsetHeight when value is "auto"
		// This happens for inline elements with no explicit setting (gh-3571)
		val === "auto" ||

		// Support: Android <=4.1 - 4.3 only
		// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) &&

		// Make sure the element is visible & connected
		elem.getClientRects().length ) {

		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box";

		// Where available, offsetWidth/offsetHeight approximate border box dimensions.
		// Where not available (e.g., SVG), assume unreliable box-sizing and interpret the
		// retrieved value as a content box dimension.
		valueIsBorderBox = offsetProp in elem;
		if ( valueIsBorderBox ) {
			val = elem[ offsetProp ];
		}
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		animationIterationCount: true,
		aspectRatio: true,
		borderImageSlice: true,
		columnCount: true,
		flexGrow: true,
		flexShrink: true,
		fontWeight: true,
		gridArea: true,
		gridColumn: true,
		gridColumnEnd: true,
		gridColumnStart: true,
		gridRow: true,
		gridRowEnd: true,
		gridRowStart: true,
		lineHeight: true,
		opacity: true,
		order: true,
		orphans: true,
		scale: true,
		widows: true,
		zIndex: true,
		zoom: true,

		// SVG-related
		fillOpacity: true,
		floodOpacity: true,
		stopOpacity: true,
		strokeMiterlimit: true,
		strokeOpacity: true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (trac-7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug trac-9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (trac-7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			// The isCustomProp check can be removed in jQuery 4.0 when we only auto-append
			// "px" to a few hardcoded values.
			if ( type === "number" && !isCustomProp ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( _i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
					swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, dimension, extra );
					} ) :
					getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),

				// Only read styles.position if the test has a chance to fail
				// to avoid forcing a reflow.
				scrollboxSizeBuggy = !support.scrollboxSize() &&
					styles.position === "absolute",

				// To avoid forcing a reflow, only fetch boxSizing if we need it (gh-3991)
				boxSizingNeeded = scrollboxSizeBuggy || extra,
				isBorderBox = boxSizingNeeded &&
					jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra ?
					boxModelAdjustment(
						elem,
						dimension,
						extra,
						isBorderBox,
						styles
					) :
					0;

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && scrollboxSizeBuggy ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
			) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 && (
				jQuery.cssHooks[ tween.prop ] ||
					tween.elem.style[ finalPropName( tween.prop ) ] != null ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

				/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (trac-12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
					animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};

		doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( _i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( _i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// Use proper attribute retrieval (trac-12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];
						if ( cur.indexOf( " " + className + " " ) < 0 ) {
							cur += className + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	removeClass: function( value ) {
		var classNames, cur, curValue, className, i, finalValue;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classNames = classesToArray( value );

		if ( classNames.length ) {
			return this.each( function() {
				curValue = getClass( this );

				// This expression is here for better compressibility (see addClass)
				cur = this.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					for ( i = 0; i < classNames.length; i++ ) {
						className = classNames[ i ];

						// Remove *all* instances
						while ( cur.indexOf( " " + className + " " ) > -1 ) {
							cur = cur.replace( " " + className + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						this.setAttribute( "class", finalValue );
					}
				}
			} );
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var classNames, className, i, self,
			type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		classNames = classesToArray( value );

		return this.each( function() {
			if ( isValidValue ) {

				// Toggle individual class names
				self = jQuery( this );

				for ( i = 0; i < classNames.length; i++ ) {
					className = classNames[ i ];

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
							"" :
							dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
				return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (trac-14686, trac-14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (trac-2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion
var location = window.location;

var nonce = { guid: Date.now() };

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml, parserErrorElem;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {}

	parserErrorElem = xml && xml.getElementsByTagName( "parsererror" )[ 0 ];
	if ( !xml || parserErrorElem ) {
		jQuery.error( "Invalid XML: " + (
			parserErrorElem ?
				jQuery.map( parserErrorElem.childNodes, function( el ) {
					return el.textContent;
				} ).join( "\n" ) :
				data
		) );
	}
	return xml;
};


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (trac-9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (trac-9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || Object.create( null ) )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (trac-6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	if ( a == null ) {
		return "";
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} ).filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} ).map( function( _i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// trac-7653, trac-8125, trac-8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (trac-10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );

originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes trac-9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
				jQuery( callbackContext ) :
				jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() + " " ] =
									( responseHeaders[ match[ 1 ].toLowerCase() + " " ] || [] )
										.concat( match[ 2 ] );
							}
						}
						match = responseHeaders[ key.toLowerCase() + " " ];
					}
					return match == null ? null : match.join( ", " );
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (trac-10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket trac-12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (trac-15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// trac-9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce.guid++ ) +
					uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Use a noop converter for missing script but not if jsonp
			if ( !isSuccess &&
				jQuery.inArray( "script", s.dataTypes ) > -1 &&
				jQuery.inArray( "json", s.dataTypes ) < 0 ) {
				s.converters[ "text script" ] = function() {};
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( _i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );

jQuery.ajaxPrefilter( function( s ) {
	var i;
	for ( i in s.headers ) {
		if ( i.toLowerCase() === "content-type" ) {
			s.contentType = s.headers[ i ] || "";
		}
	}
} );


jQuery._evalUrl = function( url, options, doc ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (trac-11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,

		// Only evaluate the response if it is successful (gh-4126)
		// dataFilter is not invoked for failure responses, so using it instead
		// of the default converter is kludgy but it works.
		converters: {
			"text script": function() {}
		},
		dataFilter: function( response ) {
			jQuery.globalEval( response, options, doc );
		}
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// trac-1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see trac-8605, trac-14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// trac-14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain or forced-by-attrs requests
	if ( s.crossDomain || s.scriptAttrs ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" )
					.attr( s.scriptAttrs || {} )
					.prop( { charset: s.scriptCharset, src: s.url } )
					.on( "load error", callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					} );

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce.guid++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( _i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( {
		padding: "inner" + name,
		content: type,
		"": "outer" + name
	}, function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( _i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	},

	hover: function( fnOver, fnOut ) {
		return this
			.on( "mouseenter", fnOver )
			.on( "mouseleave", fnOut || fnOver );
	}
} );

jQuery.each(
	( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( _i, name ) {

		// Handle event binding
		jQuery.fn[ name ] = function( data, fn ) {
			return arguments.length > 0 ?
				this.on( name, null, data, fn ) :
				this.trigger( name );
		};
	}
);




// Support: Android <=4.0 only
// Make sure we trim BOM and NBSP
// Require that the "whitespace run" starts from a non-whitespace
// to avoid O(N^2) behavior when the engine would try matching "\s+$" at each space position.
var rtrim = /^[\s\uFEFF\xA0]+|([^\s\uFEFF\xA0])[\s\uFEFF\xA0]+$/g;

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};

jQuery.trim = function( text ) {
	return text == null ?
		"" :
		( text + "" ).replace( rtrim, "$1" );
};



// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( typeof define === "function" && define.amd ) {
	define( "jquery", [], function() {
		return jQuery;
	} );
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (trac-7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (trac-13566)
if ( typeof noGlobal === "undefined" ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );